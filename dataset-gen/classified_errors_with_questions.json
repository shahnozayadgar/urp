[
    {
        "example_number": 1,
        "table": "department_management",
        "golden_query": "SELECT count(DISTINCT temporary_acting) FROM management",
        "prediction": "SELECT COUNT( * ) FROM management WHERE temporary_acting = '1'",
        "errors_detected": [
            "Missing Column: count(temporary_acting)",
            "Extra Column: count(None)",
            "Redundant WHERE Clause",
            "Missing DISTINCT Keyword"
        ],
        "question": "How many acting statuses are there?"
    },
    {
        "example_number": 2,
        "table": "student_assessment",
        "golden_query": "SELECT student_id FROM student_course_attendance",
        "prediction": "SELECT DISTINCT student_id FROM student_course_attendance",
        "errors_detected": [
            "Redundant DISTINCT Keyword"
        ],
        "question": "What are the ids of all students who have attended at least one course?"
    },
    {
        "example_number": 3,
        "table": "twitter_1",
        "golden_query": "SELECT count(*) FROM follows",
        "prediction": "SELECT COUNT( * ) , f1 FROM follows GROUP BY f1",
        "errors_detected": [
            "Extra Column: f1"
        ],
        "question": "How many followers does each user have?"
    },
    {
        "example_number": 4,
        "table": "twitter_1",
        "golden_query": "SELECT count(*) FROM follows GROUP BY f1",
        "prediction": "SELECT COUNT( * ) , f1 FROM follows GROUP BY f1",
        "errors_detected": [
            "Extra Column: f1"
        ],
        "question": "Find the number of followers for each user."
    },
    {
        "example_number": 5,
        "table": "flight_1",
        "golden_query": "SELECT aid FROM Aircraft WHERE distance  >  1000",
        "prediction": "SELECT aid FROM aircraft JOIN flight ON aid = aid WHERE distance > 1000",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "What are the ids of all aircrafts that can cover a distance of more than 1000?"
    },
    {
        "example_number": 6,
        "table": "flight_1",
        "golden_query": "SELECT aid FROM Aircraft WHERE distance  >  1000",
        "prediction": "SELECT DISTINCT aid FROM aircraft JOIN flight ON aid = aid WHERE distance > 1000",
        "errors_detected": [
            "Extra JOIN Operation",
            "Redundant DISTINCT Keyword"
        ],
        "question": "What are the ids of all aircrafts that can cover a distance of more than 1000?"
    },
    {
        "example_number": 7,
        "table": "flight_1",
        "golden_query": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000",
        "prediction": "SELECT COUNT( * ) FROM aircraft JOIN flight ON aid = aid WHERE distance BETWEEN 1000 and 5000",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "What is the count of aircrafts that have a distance between 1000 and 5000?"
    },
    {
        "example_number": 8,
        "table": "flight_1",
        "golden_query": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12",
        "prediction": "SELECT name , distance FROM aircraft JOIN flight ON aid = aid WHERE aid = 12",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "What is the name and distance for the aircraft that has an id of 12?"
    },
    {
        "example_number": 9,
        "table": "flight_1",
        "golden_query": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12",
        "prediction": "SELECT name , distance FROM aircraft JOIN flight ON aid = aid WHERE aid = 12",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "What is the name and distance for the aircraft that has an id of 12?"
    },
    {
        "example_number": 10,
        "table": "flight_1",
        "golden_query": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft",
        "prediction": "SELECT MIN( distance ) , AVG( distance ) , MAX( distance ) FROM aircraft JOIN flight ON aid = aid",
        "errors_detected": [
            "Redundant JOIN Operation"
        ],
        "question": "Return the minimum, average and maximum distances traveled across all aircrafts."
    },
    {
        "example_number": 11,
        "table": "flight_1",
        "golden_query": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft",
        "prediction": "SELECT MIN( distance ) , AVG( distance ) , MAX( distance ) FROM aircraft JOIN flight ON aid = aid",
        "errors_detected": [
            "Redundant JOIN Operation"
        ],
        "question": "Return the minimum, average and maximum distances traveled across all aircrafts."
    },
    {
        "example_number": 12,
        "table": "flight_1",
        "golden_query": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
        "prediction": "SELECT aid , name FROM aircraft JOIN flight ON aid = aid ORDER BY distance DESC LIMIT 1",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "What is the id and name of the aircraft that can cover the maximum distance?"
    },
    {
        "example_number": 13,
        "table": "flight_1",
        "golden_query": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
        "prediction": "SELECT aid , name FROM aircraft JOIN flight ON aid = aid ORDER BY distance DESC LIMIT 1",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "What is the id and name of the aircraft that can cover the maximum distance?"
    },
    {
        "example_number": 14,
        "table": "flight_1",
        "golden_query": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "prediction": "SELECT name FROM aircraft JOIN flight ON aid = aid ORDER BY distance ASC LIMIT 3",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "What are the aircrafts with top 3 shortest lengthes? List their names."
    },
    {
        "example_number": 15,
        "table": "flight_1",
        "golden_query": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)",
        "prediction": "SELECT name FROM aircraft JOIN flight ON aid = aid WHERE distance > (SELECT AVG( distance ) FROM aircraft)",
        "errors_detected": [
            "Extra JOIN Operation",
            "Wrong Key Value"
        ],
        "question": "What are the names of all aircrafts that can cover more distances than average?"
    },
    {
        "example_number": 16,
        "table": "flight_1",
        "golden_query": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)",
        "prediction": "SELECT name FROM aircraft JOIN flight ON aid = aid WHERE distance > (SELECT AVG( distance ) FROM aircraft)",
        "errors_detected": [
            "Extra JOIN Operation",
            "Wrong Key Value"
        ],
        "question": "What are the names of all aircrafts that can cover more distances than average?"
    },
    {
        "example_number": 17,
        "table": "flight_1",
        "golden_query": "SELECT eid FROM Employee WHERE salary  >  100000",
        "prediction": "SELECT eid FROM employee WHERE salary >= 100000",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What is the id of every employee who has at least a salary of  100000?"
    },
    {
        "example_number": 18,
        "table": "flight_1",
        "golden_query": "SELECT eid FROM Employee WHERE salary  >  100000",
        "prediction": "SELECT eid FROM employee WHERE salary >= 100000",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What is the id of every employee who has at least a salary of  100000?"
    },
    {
        "example_number": 19,
        "table": "flight_1",
        "golden_query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
        "prediction": "SELECT SUM( salary ) FROM employee WHERE name = 'Mark' AND name = 'Young'",
        "errors_detected": [
            "Missing Column: eid",
            "Extra Aggregation Function: sum(salary)",
            "Wrong Key Value",
            "Wrong Key Value"
        ],
        "question": "What is the id and salary of the employee named Mark Young?"
    },
    {
        "example_number": 20,
        "table": "flight_1",
        "golden_query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
        "prediction": "SELECT eid , salary FROM employee WHERE name = 'Mark'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What is the id and salary of the employee named Mark Young?"
    },
    {
        "example_number": 21,
        "table": "flight_1",
        "golden_query": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin",
        "prediction": "SELECT flno , origin , destination FROM flight ORDER BY destination ASC",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What is the flight number, origin, and destination for all flights in alphabetical order by departure cities?"
    },
    {
        "example_number": 22,
        "table": "flight_1",
        "golden_query": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin",
        "prediction": "SELECT flno , origin , destination FROM flight ORDER BY departure_date ASC",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What is the flight number, origin, and destination for all flights in alphabetical order by departure cities?"
    },
    {
        "example_number": 23,
        "table": "flight_1",
        "golden_query": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"",
        "prediction": "SELECT flno FROM flight WHERE destination = 'Los Angeles'",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the numbers of all flights coming from Los Angeles?"
    },
    {
        "example_number": 24,
        "table": "flight_1",
        "golden_query": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "prediction": "SELECT departure_date , arrival_date FROM flight WHERE destination = 'LA' AND destination = 'Honolulu'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What are the departure and arrival dates of all flights from LA to Honolulu?"
    },
    {
        "example_number": 25,
        "table": "flight_1",
        "golden_query": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "prediction": "SELECT AVG( price ) FROM flight WHERE origin = 'LA' AND destination = 'Honolulu'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What is the average price for flights from LA to Honolulu?"
    },
    {
        "example_number": 26,
        "table": "flight_1",
        "golden_query": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
        "prediction": "SELECT flno FROM flight ORDER BY distance ASC LIMIT 1",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the numbers of the shortest flights?"
    },
    {
        "example_number": 27,
        "table": "flight_1",
        "golden_query": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"",
        "prediction": "SELECT AVG( price ) , AVG( distance ) FROM flight WHERE origin = 'Los Angeles'",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What is the average distance and price for all flights from LA?"
    },
    {
        "example_number": 28,
        "table": "flight_1",
        "golden_query": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"",
        "prediction": "SELECT AVG( distance ) , AVG( price ) FROM flight WHERE origin = 'LA'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What is the average distance and price for all flights from LA?"
    },
    {
        "example_number": 29,
        "table": "flight_1",
        "golden_query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
        "prediction": "SELECT destination FROM flight GROUP BY destination ORDER BY COUNT( * ) ASC LIMIT 1",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What destination has the fewest number of flights?"
    },
    {
        "example_number": 30,
        "table": "flight_1",
        "golden_query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
        "prediction": "SELECT destination FROM flight GROUP BY destination ORDER BY COUNT( * ) ASC LIMIT 1",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What destination has the fewest number of flights?"
    },
    {
        "example_number": 31,
        "table": "store_1",
        "golden_query": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5",
        "prediction": "SELECT billing_country , COUNT( * ) FROM invoices GROUP BY billing_country ORDER BY COUNT( * ) DESC LIMIT 5",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the top 5 countries by number of invoices and how many do they have?"
    },
    {
        "example_number": 32,
        "table": "store_1",
        "golden_query": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8",
        "prediction": "SELECT billing_country , total FROM invoices ORDER BY total DESC LIMIT 8",
        "errors_detected": [
            "Missing Aggregation Function: sum(total)"
        ],
        "question": "What are the names of the top 8 countries by total invoice size and what are those sizes?"
    },
    {
        "example_number": 33,
        "table": "store_1",
        "golden_query": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10",
        "prediction": "SELECT billing_country , AVG( total ) FROM invoices GROUP BY billing_country",
        "errors_detected": [
            "Missing ORDER BY Clause"
        ],
        "question": "What are the names of the countries and average invoice size of the top countries by size?"
    },
    {
        "example_number": 34,
        "table": "store_1",
        "golden_query": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10",
        "prediction": "SELECT billing_country , AVG( total ) FROM invoices GROUP BY billing_country ORDER BY AVG( total ) ASC",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the names of the countries and average invoice size of the top countries by size?"
    },
    {
        "example_number": 35,
        "table": "store_1",
        "golden_query": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title",
        "prediction": "SELECT title FROM albums WHERE title LIKE '%A%' ORDER BY title ASC",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What are the titles of all albums that start with A in alphabetical order?"
    },
    {
        "example_number": 36,
        "table": "store_1",
        "golden_query": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title",
        "prediction": "SELECT title FROM albums WHERE title LIKE '%A%' ORDER BY title ASC",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What are the titles of all albums that start with A in alphabetical order?"
    },
    {
        "example_number": 37,
        "table": "store_1",
        "golden_query": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\"",
        "prediction": "SELECT SUM( total ) FROM invoices JOIN customers ON customer_id = id WHERE billing_city = 'invoice from Chicago' AND city = 'Chicago,'",
        "errors_detected": [
            "Extra JOIN Operation",
            "Wrong Key Value"
        ],
        "question": "What are the total amount of money in the invoices billed from Chicago, Illinois?"
    },
    {
        "example_number": 38,
        "table": "store_1",
        "golden_query": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\"",
        "prediction": "SELECT SUM( total ) FROM invoices WHERE billing_city = 'Chicago, Illinois'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What are the total amount of money in the invoices billed from Chicago, Illinois?"
    },
    {
        "example_number": 39,
        "table": "store_1",
        "golden_query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\"",
        "prediction": "SELECT COUNT( * ) FROM invoices JOIN customers ON customer_id = id WHERE billing_city = 'Chicago' AND city = 'Chicago,'",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "How many invoices were billed from Chicago, IL?"
    },
    {
        "example_number": 40,
        "table": "store_1",
        "golden_query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\"",
        "prediction": "customers , customers",
        "errors_detected": [
            "Missing Column: count(None)",
            "Missing WHERE Clause"
        ],
        "question": "How many invoices were billed from Chicago, IL?"
    },
    {
        "example_number": 41,
        "table": "store_1",
        "golden_query": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state",
        "prediction": "SELECT COUNT( * ) FROM invoices JOIN customers ON customer_id = id WHERE state = 'US,'",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing Column: billing_state"
        ],
        "question": "How many invoices were billed from each state?"
    },
    {
        "example_number": 42,
        "table": "store_1",
        "golden_query": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state",
        "prediction": "SELECT billing_state , COUNT( * ) FROM invoices GROUP BY billing_state",
        "errors_detected": [
            "Missing WHERE Clause"
        ],
        "question": "How many invoices were billed from each state?"
    },
    {
        "example_number": 43,
        "table": "store_1",
        "golden_query": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1",
        "prediction": "SELECT billing_state FROM invoices JOIN customers ON customer_id = id WHERE state = 'US' ORDER BY billing_state DESC LIMIT 1",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing Column: count(None)"
        ],
        "question": "What are the states with the most invoices?"
    },
    {
        "example_number": 44,
        "table": "store_1",
        "golden_query": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1",
        "prediction": "SELECT state FROM invoices JOIN customers ON customer_id = id GROUP BY state ORDER BY COUNT( * ) DESC LIMIT 1",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing Column: billing_state",
            "Missing Column: count(None)",
            "Extra Column: state",
            "Missing WHERE Clause",
            "Wrong GROUP BY Condition"
        ],
        "question": "What are the states with the most invoices?"
    },
    {
        "example_number": 45,
        "table": "store_1",
        "golden_query": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\"",
        "prediction": "SELECT SUM( total ) FROM invoices JOIN customers ON customer_id = id WHERE name = 'California'",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing Column: billing_state",
            "Missing Column: count(None)"
        ],
        "question": "What is the number of invoices and total money billed in them from CA?"
    },
    {
        "example_number": 46,
        "table": "store_1",
        "golden_query": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\"",
        "prediction": "SELECT COUNT( * ) FROM invoices WHERE billing_state = 'CA'",
        "errors_detected": [
            "Missing Column: billing_state",
            "Missing Column: sum(total)"
        ],
        "question": "What is the number of invoices and total money billed in them from CA?"
    },
    {
        "example_number": 47,
        "table": "store_1",
        "golden_query": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\"",
        "prediction": "SELECT company FROM customers WHERE first_name = 'Eduardo Martins'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What is the company where Eduardo Martins is a customer?"
    },
    {
        "example_number": 48,
        "table": "store_1",
        "golden_query": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\"",
        "prediction": "SELECT company FROM customers WHERE first_name = 'Eduardo Martins'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What is the company where Eduardo Martins is a customer?"
    },
    {
        "example_number": 49,
        "table": "store_1",
        "golden_query": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\"",
        "prediction": "SELECT email , phone FROM employees JOIN customers ON id = support_rep_id WHERE first_name = 'A' AND name = 'Gruber'",
        "errors_detected": [
            "Extra JOIN Operation",
            "Wrong Key Value"
        ],
        "question": "What is the email and phone number of Astrid Gruber the customer?"
    },
    {
        "example_number": 50,
        "table": "store_1",
        "golden_query": "SELECT count(*) FROM customers WHERE state = \"CA\"",
        "prediction": "SELECT COUNT( * ) FROM customers WHERE state = 'California'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "How many customers are from California?"
    },
    {
        "example_number": 51,
        "table": "store_1",
        "golden_query": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\"",
        "prediction": "SELECT country FROM employees JOIN employees ON id = address JOIN sqlite_sequence ON country = name WHERE first_name = 'Roberto' AND seq = 'Almeida'",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "In which country does Roberto Almeida?"
    },
    {
        "example_number": 52,
        "table": "store_1",
        "golden_query": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\"",
        "prediction": "SELECT country FROM customers JOIN sqlite_sequence ON id = name WHERE first_name = 'Roberto' AND seq = 'Almeida'",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "In which country does Roberto Almeida?"
    },
    {
        "example_number": 53,
        "table": "store_1",
        "golden_query": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"",
        "prediction": "SELECT address FROM employees JOIN employees ON id = address WHERE first_name = 'Nancy' AND last_name = 'Edwards'",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "What is Nancy Edwards's address?"
    },
    {
        "example_number": 54,
        "table": "store_1",
        "golden_query": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"",
        "prediction": "SELECT phone FROM employees JOIN customers ON id = support_rep_id WHERE first_name = 'Nancy' AND last_name = 'Edwards'",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "What is the the phone number of Nancy Edwards?"
    },
    {
        "example_number": 55,
        "table": "store_1",
        "golden_query": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1",
        "prediction": "SELECT first_name , last_name FROM employees ORDER BY birth_date ASC LIMIT 1",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What si the youngest employee's first and last name?"
    },
    {
        "example_number": 56,
        "table": "store_1",
        "golden_query": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1",
        "prediction": "SELECT first_name , last_name FROM employees ORDER BY birth_date ASC LIMIT 1",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What si the youngest employee's first and last name?"
    },
    {
        "example_number": 57,
        "table": "store_1",
        "golden_query": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10",
        "prediction": "SELECT first_name , last_name FROM employees ORDER BY hire_date DESC LIMIT 10",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the first and last names of the top 10 longest-serving employees?"
    },
    {
        "example_number": 58,
        "table": "store_1",
        "golden_query": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10",
        "prediction": "SELECT first_name , last_name FROM employees",
        "errors_detected": [
            "Missing ORDER BY Clause"
        ],
        "question": "What are the first and last names of the top 10 longest-serving employees?"
    },
    {
        "example_number": 59,
        "table": "store_1",
        "golden_query": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city",
        "prediction": "SELECT city , COUNT( * ) FROM employees WHERE title = 'IT Staff' GROUP BY city",
        "errors_detected": [
            "unclassified"
        ],
        "question": "How many employees who are IT staff are from each city?"
    },
    {
        "example_number": 60,
        "table": "store_1",
        "golden_query": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city",
        "prediction": "SELECT city , COUNT( * ) FROM employees WHERE title = 'IT' GROUP BY city",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "How many employees who are IT staff are from each city?"
    },
    {
        "example_number": 61,
        "table": "store_1",
        "golden_query": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\"",
        "prediction": "SELECT composer FROM tracks JOIN albums ON album_id = id WHERE name = 'Fast As a Shark'",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "What is the composer who created the track \"Fast As a Shark\"?"
    },
    {
        "example_number": 62,
        "table": "store_1",
        "golden_query": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\"",
        "prediction": "SELECT seq FROM albums JOIN tracks ON id = album_id JOIN sqlite_sequence ON composer = name WHERE title = 'Fast As a Shark'",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing Column: composer",
            "Extra Column: seq"
        ],
        "question": "What is the composer who created the track \"Fast As a Shark\"?"
    },
    {
        "example_number": 63,
        "table": "store_1",
        "golden_query": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\"",
        "prediction": "SELECT COUNT( * ) FROM albums WHERE title = 'Fast As a Shark'",
        "errors_detected": [
            "Missing Column: milliseconds",
            "Extra Column: count(None)"
        ],
        "question": "How many milliseconds long is Fast As a Shark?"
    },
    {
        "example_number": 64,
        "table": "store_1",
        "golden_query": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\"",
        "prediction": "SELECT SUM( milliseconds ) FROM albums JOIN tracks ON id = album_id WHERE name = 'Fast As a Shark'",
        "errors_detected": [
            "Extra JOIN Operation",
            "Extra Aggregation Function: sum(milliseconds)"
        ],
        "question": "How many milliseconds long is Fast As a Shark?"
    },
    {
        "example_number": 65,
        "table": "store_1",
        "golden_query": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\"",
        "prediction": "SELECT title FROM tracks JOIN albums ON album_id = id WHERE title = 'Fast As a Shark'",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing Column: unit_price",
            "Extra Column: title"
        ],
        "question": "What is the unit price of the tune \"Fast As a Shark\"?"
    },
    {
        "example_number": 66,
        "table": "store_1",
        "golden_query": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\"",
        "prediction": "SELECT SUM( unit_price ) FROM tracks JOIN albums ON album_id = id WHERE title = 'Fast As a Shark'",
        "errors_detected": [
            "Extra JOIN Operation",
            "Extra Aggregation Function: sum(unit_price)"
        ],
        "question": "What is the unit price of the tune \"Fast As a Shark\"?"
    },
    {
        "example_number": 67,
        "table": "medicine_enzyme_interaction",
        "golden_query": "SELECT count(*) FROM enzyme",
        "prediction": "SELECT COUNT( DISTINCT name ) FROM enzyme",
        "errors_detected": [
            "Missing Column: count(None)",
            "Extra Column: count(name)",
            "Redundant DISTINCT Keyword"
        ],
        "question": "What is the total count of enzymes?"
    },
    {
        "example_number": 68,
        "table": "medicine_enzyme_interaction",
        "golden_query": "SELECT max(OMIM) FROM enzyme",
        "prediction": "SELECT MAX( omim ) FROM medicine_enzyme_interaction, medicine_enzyme_interaction, enzyme WHERE omim = 'OMIM'",
        "errors_detected": [
            "Redundant WHERE Clause"
        ],
        "question": "What is the maximum OMIM value in the database?"
    },
    {
        "example_number": 69,
        "table": "medicine_enzyme_interaction",
        "golden_query": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'",
        "prediction": "SELECT name , trade_name FROM medicine",
        "errors_detected": [
            "Missing WHERE Clause"
        ],
        "question": "What are the names and trade names of the medcines that are FDA approved?"
    },
    {
        "example_number": 70,
        "table": "medicine_enzyme_interaction",
        "golden_query": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'",
        "prediction": "SELECT COUNT( * ) FROM medicine WHERE fda_approved != 1",
        "errors_detected": [
            "unclassified"
        ],
        "question": "How many medicines were not approved by the FDA?"
    },
    {
        "example_number": 71,
        "table": "medicine_enzyme_interaction",
        "golden_query": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name",
        "prediction": "SELECT COUNT( * ) , trade_name FROM medicine GROUP BY trade_name",
        "errors_detected": [
            "unclassified"
        ],
        "question": "How many medicines are offered by each trade name?"
    },
    {
        "example_number": 72,
        "table": "phone_1",
        "golden_query": "SELECT count(*) FROM phone WHERE Company_name = \"Nokia Corporation\"",
        "prediction": "SELECT COUNT( DISTINCT hardware_model_name ) FROM phone WHERE company_name = 'Nokia Corporation'",
        "errors_detected": [
            "Missing Column: count(None)",
            "Extra Column: count(hardware_model_name)",
            "Redundant DISTINCT Keyword"
        ],
        "question": "How many phone hardware models are produced by the company named \"Nokia Corporation\"?"
    },
    {
        "example_number": 73,
        "table": "phone_1",
        "golden_query": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'",
        "prediction": "SELECT COUNT( * ) FROM chip_model WHERE wifi != 'wifi'",
        "errors_detected": [
            "unclassified"
        ],
        "question": "Count the number of chip model that do not have wifi."
    },
    {
        "example_number": 74,
        "table": "phone_1",
        "golden_query": "SELECT count(*) FROM chip_model WHERE wifi  =  'No'",
        "prediction": "SELECT COUNT( * ) FROM chip_model WHERE wifi != 1",
        "errors_detected": [
            "unclassified"
        ],
        "question": "Count the number of chip model that do not have wifi."
    },
    {
        "example_number": 75,
        "table": "phone_1",
        "golden_query": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type  =  'Full'",
        "prediction": "SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE accreditation_type = 'full accreditation'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "Find the names of the chip models that are not used by any phone with full accreditation type."
    },
    {
        "example_number": 76,
        "table": "body_builder",
        "golden_query": "SELECT Height ,  Weight FROM people ORDER BY Height DESC",
        "prediction": "SELECT weight , height FROM people ORDER BY height DESC",
        "errors_detected": [
            "unclassified"
        ],
        "question": "List the height and weight of people in descending order of height."
    },
    {
        "example_number": 77,
        "table": "college_2",
        "golden_query": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50",
        "prediction": "SELECT building FROM classroom WHERE capacity > 50",
        "errors_detected": [
            "Missing DISTINCT Keyword"
        ],
        "question": "What are the distinct buildings with capacities of greater than 50?"
    },
    {
        "example_number": 78,
        "table": "college_2",
        "golden_query": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'",
        "prediction": "SELECT COUNT( * ) FROM classroom WHERE building NOT IN (SELECT building FROM section)",
        "errors_detected": [
            "unclassified"
        ],
        "question": "How many classrooms are not in Lamberton?"
    },
    {
        "example_number": 79,
        "table": "college_2",
        "golden_query": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
        "prediction": "SELECT room_number , building FROM classroom WHERE capacity BETWEEN 50 and 100",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the room numbers and corresponding buildings for classrooms which can seat between 50 to 100 students?"
    },
    {
        "example_number": 80,
        "table": "college_2",
        "golden_query": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
        "prediction": "SELECT room_number , building FROM classroom WHERE capacity BETWEEN 50 and 100",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the room numbers and corresponding buildings for classrooms which can seat between 50 to 100 students?"
    },
    {
        "example_number": 81,
        "table": "college_2",
        "golden_query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'",
        "prediction": "SELECT SUM( room_number ) FROM classroom JOIN section ON building = building",
        "errors_detected": [
            "Redundant JOIN Operation",
            "Missing Column: count(None)",
            "Extra Column: sum(room_number)",
            "Missing WHERE Clause"
        ],
        "question": "Count the number of classrooms in Lamberton."
    },
    {
        "example_number": 82,
        "table": "college_2",
        "golden_query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'",
        "prediction": "SELECT COUNT( * ) FROM classroom JOIN section ON room_number = building WHERE building = 'Lamberton'",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "Count the number of classrooms in Lamberton."
    },
    {
        "example_number": 83,
        "table": "college_2",
        "golden_query": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'",
        "prediction": "SELECT COUNT( * ) FROM course WHERE dept_name = 'Physics'",
        "errors_detected": [
            "Missing Column: count(course_id)",
            "Extra Column: count(None)",
            "Missing DISTINCT Keyword"
        ],
        "question": "Count the number of courses in the Physics department."
    },
    {
        "example_number": 84,
        "table": "college_2",
        "golden_query": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'",
        "prediction": "SELECT COUNT( * ) FROM course WHERE dept_name = 'Physics'",
        "errors_detected": [
            "Missing Column: count(course_id)",
            "Extra Column: count(None)",
            "Missing DISTINCT Keyword"
        ],
        "question": "Count the number of courses in the Physics department."
    },
    {
        "example_number": 85,
        "table": "college_2",
        "golden_query": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'",
        "prediction": "SELECT SUM( budget ) FROM department WHERE dept_name = 'Marketing'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What is the sum of budgets of the Marketing and Finance departments?"
    },
    {
        "example_number": 86,
        "table": "college_2",
        "golden_query": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'",
        "prediction": "SELECT dept_name FROM instructor WHERE name = 'Soisalon'",
        "errors_detected": [
            "Missing LIKE Clause"
        ],
        "question": "What is the name of the department with an instructure who has a name like 'Soisalon'?"
    },
    {
        "example_number": 87,
        "table": "college_2",
        "golden_query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
        "prediction": "SELECT COUNT( * ) FROM classroom, section WHERE building = 'Lamberton' AND capacity<50",
        "errors_detected": [
            "unclassified"
        ],
        "question": "Count the number of rooms in Lamberton with capacity lower than 50."
    },
    {
        "example_number": 88,
        "table": "college_2",
        "golden_query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
        "prediction": "SELECT COUNT( * ) FROM classroom JOIN section ON room_number = room_number WHERE capacity<50",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "Count the number of rooms in Lamberton with capacity lower than 50."
    },
    {
        "example_number": 89,
        "table": "college_2",
        "golden_query": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
        "prediction": "SELECT AVG( budget ) FROM department",
        "errors_detected": [
            "Missing Column: dept_name",
            "Extra Aggregation Function: avg(budget)",
            "Missing WHERE Clause"
        ],
        "question": "What are the names and budgets of departments with budgets greater than the average?"
    },
    {
        "example_number": 90,
        "table": "college_2",
        "golden_query": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
        "prediction": "SELECT name FROM takes JOIN student ON id = id WHERE year = 2009 INTERSECT SELECT name FROM takes JOIN student ON id = id WHERE year = 2010",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing Column: id",
            "Extra Column: name",
            "Wrong Key Value"
        ],
        "question": "What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?"
    },
    {
        "example_number": 91,
        "table": "college_2",
        "golden_query": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
        "prediction": "SELECT name FROM takes JOIN student ON id = id WHERE year = 2009 OR year = 2010",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing Column: id",
            "Extra Column: name",
            "Wrong Key Value"
        ],
        "question": "What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?"
    },
    {
        "example_number": 92,
        "table": "college_2",
        "golden_query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3",
        "prediction": "SELECT dept_name FROM department JOIN course ON dept_name = dept_name GROUP BY dept_name ORDER BY COUNT( * ) DESC LIMIT 3",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "What are the names of the 3 departments with the most courses?"
    },
    {
        "example_number": 93,
        "table": "college_2",
        "golden_query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3",
        "prediction": "SELECT dept_name FROM department JOIN course ON dept_name = dept_name GROUP BY dept_name ORDER BY COUNT( * ) DESC LIMIT 3",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "What are the names of the 3 departments with the most courses?"
    },
    {
        "example_number": 94,
        "table": "college_2",
        "golden_query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1",
        "prediction": "SELECT dept_name FROM department JOIN student ON dept_name = dept_name ORDER BY tot_cred DESC LIMIT 1",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "What is the name of the department with the most credits?"
    },
    {
        "example_number": 95,
        "table": "college_2",
        "golden_query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1",
        "prediction": "SELECT dept_name FROM department JOIN student ON dept_name = dept_name ORDER BY tot_cred DESC LIMIT 1",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "What is the name of the department with the most credits?"
    },
    {
        "example_number": 96,
        "table": "college_2",
        "golden_query": "SELECT title FROM course ORDER BY title ,  credits",
        "prediction": "SELECT title , credits FROM course ORDER BY credits ASC",
        "errors_detected": [
            "Extra Column: credits"
        ],
        "question": "Given the titles of all courses, in order of titles and credits."
    },
    {
        "example_number": 97,
        "table": "college_2",
        "golden_query": "SELECT title FROM course ORDER BY title ,  credits",
        "prediction": "SELECT title , credits FROM course ORDER BY credits ASC",
        "errors_detected": [
            "Extra Column: credits"
        ],
        "question": "Given the titles of all courses, in order of titles and credits."
    },
    {
        "example_number": 98,
        "table": "college_2",
        "golden_query": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building",
        "prediction": "SELECT COUNT( * ) , building FROM classroom JOIN section ON building = building WHERE capacity > 50 GROUP BY building",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "How many rooms in each building have a capacity of over 50?"
    },
    {
        "example_number": 99,
        "table": "college_2",
        "golden_query": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building",
        "prediction": "SELECT MAX( capacity ) , MIN( capacity ) , building FROM classroom GROUP BY building",
        "errors_detected": [
            "Aggregation Function Mismatch for Column 'capacity': Expected 'avg', Found 'min'"
        ],
        "question": "What are the greatest and average capacity for rooms in each building?"
    },
    {
        "example_number": 100,
        "table": "college_2",
        "golden_query": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name",
        "prediction": "SELECT SUM( tot_cred ) , dept_name FROM student GROUP BY dept_name",
        "errors_detected": [
            "Missing Column: sum(credits)",
            "Extra Column: sum(tot_cred)"
        ],
        "question": "How many total credits are offered by each department?"
    },
    {
        "example_number": 101,
        "table": "college_2",
        "golden_query": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)",
        "prediction": "SELECT dept_name FROM instructor GROUP BY dept_name HAVING AVG( salary ) > (SELECT AVG( salary ) FROM instructor)",
        "errors_detected": [
            "Missing Column: min(salary)",
            "Wrong Key Value in HAVING Clause"
        ],
        "question": "What is the lowest salary in departments with average salary greater than the overall average."
    },
    {
        "example_number": 102,
        "table": "college_2",
        "golden_query": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)",
        "prediction": "SELECT AVG( salary ) FROM instructor",
        "errors_detected": [
            "Aggregation Function Mismatch for Column 'salary': Expected 'min', Found 'avg'",
            "Missing Column: dept_name",
            "Missing HAVING Clause"
        ],
        "question": "What is the lowest salary in departments with average salary greater than the overall average."
    },
    {
        "example_number": 103,
        "table": "college_2",
        "golden_query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
        "prediction": "SELECT dept_name , COUNT( * ) FROM student GROUP BY dept_name",
        "errors_detected": [
            "unclassified"
        ],
        "question": "How many students are in each department?"
    },
    {
        "example_number": 104,
        "table": "college_2",
        "golden_query": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1",
        "prediction": "SELECT dept_name FROM instructor WHERE salary > (SELECT AVG( salary ) FROM instructor) GROUP BY dept_name ORDER BY AVG( salary ) DESC LIMIT 1",
        "errors_detected": [
            "Redundant WHERE Clause"
        ],
        "question": "Which department has the highest average instructor salary?"
    },
    {
        "example_number": 105,
        "table": "college_2",
        "golden_query": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')",
        "prediction": "SELECT AVG( salary ) FROM instructor",
        "errors_detected": [
            "Missing Column: name",
            "Extra Aggregation Function: avg(salary)",
            "Missing WHERE Clause"
        ],
        "question": "What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department?"
    },
    {
        "example_number": 106,
        "table": "college_2",
        "golden_query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'",
        "prediction": "SELECT name FROM instructor WHERE dept_name = 'computer science'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What are the names of all instructors in the Comp. Sci. department?"
    },
    {
        "example_number": 107,
        "table": "college_2",
        "golden_query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'",
        "prediction": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What are the names of all instructors in the Comp. Sci. department?"
    },
    {
        "example_number": 108,
        "table": "college_2",
        "golden_query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000",
        "prediction": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci' AND salary > 80000",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What are the names of the instructors in the Comp. Sci. department who earn more than 80000?"
    },
    {
        "example_number": 109,
        "table": "college_2",
        "golden_query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000",
        "prediction": "SELECT name FROM instructor WHERE dept_name = 'Comp. Sci' AND salary > 80000",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What are the names of the instructors in the Comp. Sci. department who earn more than 80000?"
    },
    {
        "example_number": 110,
        "table": "college_2",
        "golden_query": "SELECT DISTINCT name FROM  instructor ORDER BY name",
        "prediction": "SELECT DISTINCT name FROM instructor ORDER BY name ASC",
        "errors_detected": [
            "unclassified"
        ],
        "question": "List the distinct names of the instructors, ordered by name."
    },
    {
        "example_number": 111,
        "table": "college_2",
        "golden_query": "SELECT DISTINCT name FROM  instructor ORDER BY name",
        "prediction": "SELECT DISTINCT name FROM instructor ORDER BY name ASC",
        "errors_detected": [
            "unclassified"
        ],
        "question": "List the distinct names of the instructors, ordered by name."
    },
    {
        "example_number": 112,
        "table": "college_2",
        "golden_query": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)",
        "prediction": "SELECT MAX( salary ) FROM instructor",
        "errors_detected": [
            "Extra Aggregation Function: max(salary)",
            "Missing WHERE Clause",
            "Missing DISTINCT Keyword"
        ],
        "question": "What are the distinct salaries of all instructors who earned less than the maximum salary?"
    },
    {
        "example_number": 113,
        "table": "college_2",
        "golden_query": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)",
        "prediction": "SELECT MIN( salary ) FROM instructor",
        "errors_detected": [
            "Extra Aggregation Function: min(salary)",
            "Missing WHERE Clause",
            "Missing DISTINCT Keyword"
        ],
        "question": "What are the distinct salaries of all instructors who earned less than the maximum salary?"
    },
    {
        "example_number": 114,
        "table": "college_2",
        "golden_query": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
        "prediction": "SELECT COUNT( * ) FROM teaches JOIN section ON course_id = course_id WHERE semester = 'Spring 2010'",
        "errors_detected": [
            "Extra JOIN Operation",
            "Extra Column: count(None)",
            "Wrong Key Value",
            "Missing DISTINCT Keyword"
        ],
        "question": "How many instructors teach a course in the Spring of 2010?"
    },
    {
        "example_number": 115,
        "table": "college_2",
        "golden_query": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
        "prediction": "section , section",
        "errors_detected": [
            "Missing WHERE Clause",
            "Missing DISTINCT Keyword"
        ],
        "question": "How many instructors teach a course in the Spring of 2010?"
    },
    {
        "example_number": 116,
        "table": "college_2",
        "golden_query": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000",
        "prediction": "SELECT dept_name FROM instructor GROUP BY dept_name HAVING AVG( salary ) > 42000",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the names and average salaries for departments with average salary higher than 42000?"
    },
    {
        "example_number": 117,
        "table": "college_2",
        "golden_query": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000",
        "prediction": "SELECT dept_name FROM department JOIN instructor ON dept_name = dept_name GROUP BY dept_name HAVING AVG( salary ) > 42000",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "What are the names and average salaries for departments with average salary higher than 42000?"
    },
    {
        "example_number": 118,
        "table": "college_2",
        "golden_query": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')",
        "prediction": "SELECT name FROM instructor WHERE salary > (SELECT salary FROM instructor WHERE dept_name = 'Biology')",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What are the names of all instructors with a higher salary than any of the instructors in the Biology department?"
    },
    {
        "example_number": 119,
        "table": "college_2",
        "golden_query": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')",
        "prediction": "SELECT name FROM instructor WHERE salary > (SELECT salary FROM instructor WHERE dept_name = 'Biology')",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What are the names of all instructors with a higher salary than any of the instructors in the Biology department?"
    },
    {
        "example_number": 120,
        "table": "insurance_and_eClaims",
        "golden_query": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"",
        "prediction": "SELECT DISTINCT customer_details FROM customers WHERE customer_details LIKE '%Diana%'",
        "errors_detected": [
            "Redundant DISTINCT Keyword"
        ],
        "question": "Which customers have the substring \"Diana\" in their names? Return the customer details."
    },
    {
        "example_number": 121,
        "table": "wedding",
        "golden_query": "SELECT count(*) FROM people WHERE is_male  =  'F' AND age  >  30",
        "prediction": "SELECT COUNT( * ) FROM people JOIN wedding ON people_id = female_id WHERE age > 30",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "How many female people are older than 30 in our record?"
    },
    {
        "example_number": 122,
        "table": "wedding",
        "golden_query": "SELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30",
        "prediction": "SELECT country FROM people WHERE age > 30 INTERSECT SELECT country FROM people WHERE age<25",
        "errors_detected": [
            "unclassified"
        ],
        "question": "Show the country where people older than 30 and younger than 25 are from."
    },
    {
        "example_number": 123,
        "table": "wedding",
        "golden_query": "SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR  =  2016",
        "prediction": "SELECT COUNT( * ) FROM wedding WHERE year = 2016",
        "errors_detected": [
            "Extra Column: count(None)",
            "Missing DISTINCT Keyword"
        ],
        "question": "How many churches have a wedding in year 2016?"
    },
    {
        "example_number": 124,
        "table": "epinions_1",
        "golden_query": "SELECT count(*) FROM useracct",
        "prediction": "SELECT COUNT( * ) FROM useracct JOIN * ON u_id = * GROUP BY * ORDER BY COUNT( * ) DESC LIMIT *",
        "errors_detected": [
            "Extra JOIN Operation",
            "Redundant ORDER BY Clause"
        ],
        "question": "How many users are there?"
    },
    {
        "example_number": 125,
        "table": "epinions_1",
        "golden_query": "SELECT min(rank) FROM review",
        "prediction": "SELECT rank FROM review ORDER BY rank DESC LIMIT 1",
        "errors_detected": [
            "Missing Aggregation Function: min(rank)",
            "Redundant ORDER BY Clause"
        ],
        "question": "Find the highest rank of all reviews."
    },
    {
        "example_number": 126,
        "table": "school_finance",
        "golden_query": "SELECT donator_name ,  sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC",
        "prediction": "SELECT donator_name , amount FROM endowment ORDER BY amount DESC",
        "errors_detected": [
            "Missing Aggregation Function: sum(amount)"
        ],
        "question": "List each donator name and the amount of endowment in descending order of the amount of endowment."
    },
    {
        "example_number": 127,
        "table": "school_finance",
        "golden_query": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001",
        "prediction": "SELECT COUNT( * ) FROM budget WHERE year BETWEEN 3000 and 2001",
        "errors_detected": [
            "unclassified"
        ],
        "question": "Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000"
    },
    {
        "example_number": 128,
        "table": "school_finance",
        "golden_query": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001",
        "prediction": "SELECT COUNT( * ) FROM budget WHERE year BETWEEN 2001 and 3000",
        "errors_detected": [
            "unclassified"
        ],
        "question": "Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000"
    },
    {
        "example_number": 129,
        "table": "school_finance",
        "golden_query": "SELECT DISTINCT donator_name FROM endowment",
        "prediction": "SELECT donator_name FROM endowment",
        "errors_detected": [
            "Missing DISTINCT Keyword"
        ],
        "question": "Show all donor names."
    },
    {
        "example_number": 130,
        "table": "school_finance",
        "golden_query": "SELECT count(*) FROM (SELECT * FROM endowment WHERE amount  >  8.5 GROUP BY school_id HAVING count(*)  >  1)",
        "prediction": "SELECT COUNT( * ) FROM endowment WHERE amount<5 HAVING COUNT( * ) > 1",
        "errors_detected": [
            "Redundant WHERE Clause",
            "Redundant HAVING Clause"
        ],
        "question": "Find the number of schools that have more than one donator whose donation amount is less than 8.5."
    },
    {
        "example_number": 131,
        "table": "cinema",
        "golden_query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
        "prediction": "SELECT location FROM cinema GROUP BY location HAVING COUNT( * ) > 1",
        "errors_detected": [
            "Missing WHERE Clause"
        ],
        "question": "In which locations are there more than one movie theater with capacity above 300?"
    },
    {
        "example_number": 132,
        "table": "cinema",
        "golden_query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
        "prediction": "SELECT location FROM cinema GROUP BY location HAVING COUNT( * ) > 1",
        "errors_detected": [
            "Missing WHERE Clause"
        ],
        "question": "In which locations are there more than one movie theater with capacity above 300?"
    },
    {
        "example_number": 133,
        "table": "machine_repair",
        "golden_query": "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\"",
        "prediction": "SELECT starting_year FROM technician WHERE team = 'CLE' OR team = 'CWS'",
        "errors_detected": [
            "Wrong Key Value",
            "Wrong Key Value"
        ],
        "question": "What are the starting years shared by the technicians from the team \"CLE\" or \"CWS\"?"
    },
    {
        "example_number": 134,
        "table": "perpetrator",
        "golden_query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1",
        "prediction": "SELECT country FROM perpetrator GROUP BY country ORDER BY COUNT( * ) DESC LIMIT 1",
        "errors_detected": [
            "Missing Column: count(None)"
        ],
        "question": "What is the country that has the most perpetrators?"
    },
    {
        "example_number": 135,
        "table": "perpetrator",
        "golden_query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*)  >=  2",
        "prediction": "SELECT country FROM perpetrator GROUP BY country HAVING COUNT( * ) >= 2",
        "errors_detected": [
            "Missing Column: count(None)"
        ],
        "question": "What are the countries that have at least two perpetrators?"
    },
    {
        "example_number": 136,
        "table": "perpetrator",
        "golden_query": "SELECT max(YEAR) FROM perpetrator",
        "prediction": "SELECT year FROM perpetrator GROUP BY year ORDER BY COUNT( * ) DESC LIMIT 1",
        "errors_detected": [
            "Missing Column: max(None)",
            "Redundant ORDER BY Clause"
        ],
        "question": "In which year did the most recent crime happen?"
    },
    {
        "example_number": 137,
        "table": "inn_1",
        "golden_query": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern'",
        "prediction": "SELECT roomname FROM rooms JOIN two ON beds = two WHERE baseprice<160",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "What are the names of modern rooms that have a base price lower than $160 and two beds."
    },
    {
        "example_number": 138,
        "table": "inn_1",
        "golden_query": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern'",
        "prediction": "SELECT roomname FROM rooms JOIN two ON beds = two WHERE baseprice<160",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "What are the names of modern rooms that have a base price lower than $160 and two beds."
    },
    {
        "example_number": 139,
        "table": "inn_1",
        "golden_query": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\"",
        "prediction": "SELECT SUM( kids ) FROM reservations WHERE firstname = 'ROY SWEAZY'",
        "errors_detected": [
            "Extra Aggregation Function: sum(kids)",
            "Wrong Key Value"
        ],
        "question": "Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ."
    },
    {
        "example_number": 140,
        "table": "inn_1",
        "golden_query": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\"",
        "prediction": "SELECT SUM( kids ) FROM reservations WHERE firstname = 'ROY SWEAZ'",
        "errors_detected": [
            "Extra Aggregation Function: sum(kids)",
            "Wrong Key Value"
        ],
        "question": "Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ."
    },
    {
        "example_number": 141,
        "table": "inn_1",
        "golden_query": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\"",
        "prediction": "SELECT COUNT( * ) FROM reservations WHERE firstname = 'ROY SWEAZY'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "Find the number of times ROY SWEAZY has reserved a room."
    },
    {
        "example_number": 142,
        "table": "inn_1",
        "golden_query": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\"",
        "prediction": "SELECT COUNT( * ) FROM reservations WHERE firstname = 'ROY SWEAZY'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "Find the number of times ROY SWEAZY has reserved a room."
    },
    {
        "example_number": 143,
        "table": "inn_1",
        "golden_query": "SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\"",
        "prediction": "SELECT SUM( adults ) FROM reservations WHERE checkin = 'CONRAD SELBIG'",
        "errors_detected": [
            "Extra Aggregation Function: sum(adults)",
            "Wrong Key Value"
        ],
        "question": "Find the number of adults for the room reserved and checked in by CONRAD SELBIG on Oct 23, 2010."
    },
    {
        "example_number": 144,
        "table": "inn_1",
        "golden_query": "SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\"",
        "prediction": "SELECT SUM( adults ) FROM reservations WHERE firstname = 'CONRAD SELBIG' AND checkin = 2010",
        "errors_detected": [
            "Extra Aggregation Function: sum(adults)",
            "Wrong Key Value",
            "Wrong Key Value"
        ],
        "question": "Find the number of adults for the room reserved and checked in by CONRAD SELBIG on Oct 23, 2010."
    },
    {
        "example_number": 145,
        "table": "inn_1",
        "golden_query": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\"",
        "prediction": "SELECT SUM( kids ) FROM reservations JOIN rooms ON room = roomid WHERE firstname = 'DAMIEN TRACHSEL' AND checkin = 2010",
        "errors_detected": [
            "Extra JOIN Operation",
            "Extra Aggregation Function: sum(kids)",
            "Wrong Key Value",
            "Wrong Key Value"
        ],
        "question": "Return the number of kids for the room reserved and checked in by DAMIEN TRACHSEL on  Sep 21, 2010."
    },
    {
        "example_number": 146,
        "table": "inn_1",
        "golden_query": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\"",
        "prediction": "SELECT kids FROM reservations WHERE firstname = 'DAMIEN TRACHSEL' AND checkin = 2010",
        "errors_detected": [
            "Wrong Key Value",
            "Wrong Key Value"
        ],
        "question": "Return the number of kids for the room reserved and checked in by DAMIEN TRACHSEL on  Sep 21, 2010."
    },
    {
        "example_number": 147,
        "table": "inn_1",
        "golden_query": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\"",
        "prediction": "SELECT decor FROM rooms WHERE roomname = 'Recluse' AND roomname = 'defiance'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "Return the decor of the room named \"Recluse and defiance\"."
    },
    {
        "example_number": 148,
        "table": "inn_1",
        "golden_query": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\"",
        "prediction": "SELECT decor FROM rooms WHERE roomname = 'defiance'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "Return the decor of the room named \"Recluse and defiance\"."
    },
    {
        "example_number": 149,
        "table": "inn_1",
        "golden_query": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern'",
        "prediction": "SELECT COUNT( * ) FROM rooms WHERE decor = 'modern'",
        "errors_detected": [
            "Missing Column: sum(maxoccupancy)",
            "Extra Column: count(None)"
        ],
        "question": "How many people in total can stay in the modern rooms of this inn?"
    },
    {
        "example_number": 150,
        "table": "inn_1",
        "golden_query": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern'",
        "prediction": "SELECT decor FROM rooms GROUP BY decor ORDER BY COUNT( * ) ASC LIMIT 1",
        "errors_detected": [
            "Missing Column: sum(maxoccupancy)",
            "Extra Column: decor",
            "Missing WHERE Clause",
            "Redundant ORDER BY Clause"
        ],
        "question": "How many people in total can stay in the modern rooms of this inn?"
    },
    {
        "example_number": 151,
        "table": "inn_1",
        "golden_query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1",
        "prediction": "SELECT roomname FROM rooms ORDER BY baseprice DESC LIMIT 1",
        "errors_detected": [
            "Missing Column: roomid"
        ],
        "question": "Which room has the highest base price?"
    },
    {
        "example_number": 152,
        "table": "inn_1",
        "golden_query": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\"",
        "prediction": "SELECT bedtype , roomname FROM rooms WHERE decor = 'traditional'",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the bed type and name of all the rooms with traditional decor?"
    },
    {
        "example_number": 153,
        "table": "inn_1",
        "golden_query": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\"",
        "prediction": "SELECT bedtype , roomname FROM rooms WHERE decor = 'traditional'",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the bed type and name of all the rooms with traditional decor?"
    },
    {
        "example_number": 154,
        "table": "inn_1",
        "golden_query": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor",
        "prediction": "SELECT COUNT( * ) , decor FROM rooms WHERE bedtype = 'king' GROUP BY decor",
        "errors_detected": [
            "unclassified"
        ],
        "question": "How many rooms have king beds? Report the number for each decor type."
    },
    {
        "example_number": 155,
        "table": "inn_1",
        "golden_query": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor",
        "prediction": "SELECT COUNT( * ) , decor FROM rooms WHERE bedtype = 'king' GROUP BY decor",
        "errors_detected": [
            "unclassified"
        ],
        "question": "How many rooms have king beds? Report the number for each decor type."
    },
    {
        "example_number": 156,
        "table": "inn_1",
        "golden_query": "SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor",
        "prediction": "SELECT AVG( baseprice ) , MIN( baseprice ) , decor FROM rooms GROUP BY decor",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What is the average minimum and price of the rooms for each different decor."
    },
    {
        "example_number": 157,
        "table": "inn_1",
        "golden_query": "SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor",
        "prediction": "SELECT AVG( baseprice ) , MIN( baseprice ) , decor FROM rooms GROUP BY decor",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What is the average minimum and price of the rooms for each different decor."
    },
    {
        "example_number": 158,
        "table": "inn_1",
        "golden_query": "SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor",
        "prediction": "SELECT COUNT( * ) , decor FROM rooms WHERE baseprice > 120 GROUP BY decor",
        "errors_detected": [
            "unclassified"
        ],
        "question": "How many rooms cost more than 120, for each different decor?"
    },
    {
        "example_number": 159,
        "table": "inn_1",
        "golden_query": "SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor",
        "prediction": "SELECT COUNT( * ) , decor FROM rooms WHERE baseprice > 120 GROUP BY decor",
        "errors_detected": [
            "unclassified"
        ],
        "question": "How many rooms cost more than 120, for each different decor?"
    },
    {
        "example_number": 160,
        "table": "inn_1",
        "golden_query": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType",
        "prediction": "SELECT AVG( baseprice ) , bedtype FROM rooms GROUP BY bedtype",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What is the average base price of rooms, for each bed type?"
    },
    {
        "example_number": 161,
        "table": "inn_1",
        "golden_query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3",
        "prediction": "SELECT roomname , roomid FROM rooms ORDER BY baseprice DESC LIMIT 3",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the name and id of the three highest priced rooms?"
    },
    {
        "example_number": 162,
        "table": "inn_1",
        "golden_query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3",
        "prediction": "SELECT roomname , roomid FROM rooms ORDER BY baseprice DESC LIMIT 3",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the name and id of the three highest priced rooms?"
    },
    {
        "example_number": 163,
        "table": "inn_1",
        "golden_query": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)",
        "prediction": "SELECT COUNT( * ) FROM rooms WHERE roomid NOT IN (SELECT room FROM reservations)",
        "errors_detected": [
            "Missing DISTINCT Keyword"
        ],
        "question": "How many rooms have not had any reservation yet?"
    },
    {
        "example_number": 164,
        "table": "inn_1",
        "golden_query": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)",
        "prediction": "SELECT COUNT( * ) FROM rooms WHERE roomid NOT IN (SELECT room FROM reservations)",
        "errors_detected": [
            "Missing DISTINCT Keyword"
        ],
        "question": "How many rooms have not had any reservation yet?"
    },
    {
        "example_number": 165,
        "table": "election",
        "golden_query": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2",
        "prediction": "SELECT party FROM election JOIN party ON party = party_id GROUP BY party HAVING COUNT( * ) >= 2",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "Which party has two or more records?"
    },
    {
        "example_number": 166,
        "table": "election",
        "golden_query": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2",
        "prediction": "SELECT party FROM election JOIN party ON party = party_id GROUP BY party HAVING COUNT( * ) >= 2",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "Which party has two or more records?"
    },
    {
        "example_number": 167,
        "table": "loan_1",
        "golden_query": "SELECT sum(no_of_customers) FROM bank",
        "prediction": "SELECT COUNT( * ) FROM customer",
        "errors_detected": [
            "Missing Column: sum(no_of_customers)",
            "Extra Column: count(None)"
        ],
        "question": "What is the total number of customers across banks?"
    },
    {
        "example_number": 168,
        "table": "loan_1",
        "golden_query": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'",
        "prediction": "SELECT COUNT( * ) FROM bank WHERE city = 'New York City'",
        "errors_detected": [
            "Missing Column: sum(no_of_customers)",
            "Extra Column: count(None)"
        ],
        "question": "What is the total number of customers who use banks in New York City?"
    },
    {
        "example_number": 169,
        "table": "loan_1",
        "golden_query": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'",
        "prediction": "SELECT COUNT( * ) FROM bank WHERE city = 'New York City'",
        "errors_detected": [
            "Missing Column: sum(no_of_customers)",
            "Extra Column: count(None)"
        ],
        "question": "What is the total number of customers who use banks in New York City?"
    },
    {
        "example_number": 170,
        "table": "loan_1",
        "golden_query": "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'",
        "prediction": "SELECT AVG( no_of_customers ) FROM bank JOIN customer ON branch_id = branch_id WHERE state = 'Utah'",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "What is the average number of customers across banks in the state of Utah?"
    },
    {
        "example_number": 171,
        "table": "loan_1",
        "golden_query": "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'",
        "prediction": "SELECT AVG( no_of_customers ) FROM bank JOIN customer ON branch_id = branch_id WHERE state = 'Utah'",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "What is the average number of customers across banks in the state of Utah?"
    },
    {
        "example_number": 172,
        "table": "loan_1",
        "golden_query": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'",
        "prediction": "SELECT SUM( acc_bal ) FROM customer JOIN bank ON branch_id = branch_id WHERE state = 'Utah' OR state = 'Texas'",
        "errors_detected": [
            "Extra JOIN Operation",
            "Wrong Key Value",
            "Wrong Key Value"
        ],
        "question": "What are the total account balances for each customer from Utah or Texas?"
    },
    {
        "example_number": 173,
        "table": "loan_1",
        "golden_query": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'",
        "prediction": "SELECT SUM( acc_bal ) FROM customer JOIN bank ON branch_id = branch_id WHERE state = 'Utah' OR state = 'Texas'",
        "errors_detected": [
            "Extra JOIN Operation",
            "Wrong Key Value",
            "Wrong Key Value"
        ],
        "question": "What are the total account balances for each customer from Utah or Texas?"
    },
    {
        "example_number": 174,
        "table": "loan_1",
        "golden_query": "SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'",
        "prediction": "SELECT cust_name FROM customer WHERE acc_type = 'savings' INTERSECT SELECT cust_name FROM customer WHERE acc_type = 'checking'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What are the names of customers who have both savings and checking accounts?"
    },
    {
        "example_number": 175,
        "table": "loan_1",
        "golden_query": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'",
        "prediction": "SELECT cust_name FROM customer WHERE acc_type != 'saving'",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the names of customers who do not have saving accounts?"
    },
    {
        "example_number": 176,
        "table": "loan_1",
        "golden_query": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'",
        "prediction": "SELECT cust_name FROM customer WHERE acc_type != 'saving'",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the names of customers who do not have saving accounts?"
    },
    {
        "example_number": 177,
        "table": "loan_1",
        "golden_query": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1",
        "prediction": "SELECT bname FROM bank JOIN customer ON branch_id = branch_id GROUP BY branch_id ORDER BY COUNT( * ) DESC LIMIT 1",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "What is the name of the bank branch with the greatest number of customers?"
    },
    {
        "example_number": 178,
        "table": "loan_1",
        "golden_query": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1",
        "prediction": "SELECT cust_name FROM customer ORDER BY no_of_loans DESC LIMIT 1",
        "errors_detected": [
            "Missing Column: state",
            "Extra Column: cust_name"
        ],
        "question": "Which state has the greatest total number of bank customers?"
    },
    {
        "example_number": 179,
        "table": "loan_1",
        "golden_query": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1",
        "prediction": "SELECT state FROM customer GROUP BY state ORDER BY COUNT( * ) DESC LIMIT 1",
        "errors_detected": [
            "unclassified"
        ],
        "question": "Which state has the greatest total number of bank customers?"
    },
    {
        "example_number": 180,
        "table": "loan_1",
        "golden_query": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type",
        "prediction": "SELECT acc_type , AVG( acc_bal ) FROM customer WHERE credit_score<50 GROUP BY acc_type",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What is the average account balance of customers with credit score below 50 for the different account types?"
    },
    {
        "example_number": 181,
        "table": "loan_1",
        "golden_query": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
        "prediction": "SELECT AVG( credit_score ) FROM customer JOIN loan ON cust_id = cust_id",
        "errors_detected": [
            "Redundant JOIN Operation",
            "Missing WHERE Clause"
        ],
        "question": "What is the average credit score for customers who have taken a loan?"
    },
    {
        "example_number": 182,
        "table": "loan_1",
        "golden_query": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
        "prediction": "SELECT AVG( credit_score ) FROM customer",
        "errors_detected": [
            "Missing WHERE Clause"
        ],
        "question": "What is the average credit score for customers who have taken a loan?"
    },
    {
        "example_number": 183,
        "table": "assets_maintenance",
        "golden_query": "SELECT DISTINCT fault_status FROM Fault_Log_Parts",
        "prediction": "SELECT COUNT( DISTINCT fault_status ) FROM fault_log_parts",
        "errors_detected": [
            "Extra Aggregation Function: count(fault_status)"
        ],
        "question": "How many fault status codes are recorded in the fault log parts table?"
    },
    {
        "example_number": 184,
        "table": "assets_maintenance",
        "golden_query": "SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets",
        "prediction": "SELECT asset_id , other_asset_details , asset_make , asset_model FROM assets",
        "errors_detected": [
            "Missing Column: asset_details",
            "Extra Column: other_asset_details"
        ],
        "question": "List the asset id, details, make and model for every asset."
    },
    {
        "example_number": 185,
        "table": "assets_maintenance",
        "golden_query": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1",
        "prediction": "SELECT part_id , part_name FROM parts JOIN part_faults ON part_id = part_id GROUP BY part_id ORDER BY SUM( chargeable_amount ) ASC LIMIT 1",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing Column: chargeable_amount",
            "Extra Column: part_name"
        ],
        "question": "Which part has the least chargeable amount? List the part id and amount."
    },
    {
        "example_number": 186,
        "table": "college_1",
        "golden_query": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"",
        "prediction": "SELECT COUNT( * ) FROM class WHERE class_code = 'ACCT-211'",
        "errors_detected": [
            "Missing Column: count(prof_num)",
            "Extra Column: count(None)",
            "Missing DISTINCT Keyword"
        ],
        "question": "How many professors teach a class with the code ACCT-211?"
    },
    {
        "example_number": 187,
        "table": "college_1",
        "golden_query": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"",
        "prediction": "SELECT COUNT( * ) FROM class WHERE class_code = 'ACCT-211'",
        "errors_detected": [
            "Missing Column: count(prof_num)",
            "Extra Column: count(None)",
            "Missing DISTINCT Keyword"
        ],
        "question": "How many professors teach a class with the code ACCT-211?"
    },
    {
        "example_number": 188,
        "table": "college_1",
        "golden_query": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'",
        "prediction": "SELECT SUM( crs_credit ) , crs_description FROM course WHERE crs_code = 'CIS-220'",
        "errors_detected": [
            "Extra Aggregation Function: sum(crs_credit)"
        ],
        "question": "What is the description for the CIS-220 and how many credits does it have?"
    },
    {
        "example_number": 189,
        "table": "college_1",
        "golden_query": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'",
        "prediction": "class , class",
        "errors_detected": [
            "Missing Column: crs_credit",
            "Missing Column: crs_description",
            "Missing WHERE Clause"
        ],
        "question": "What is the description for the CIS-220 and how many credits does it have?"
    },
    {
        "example_number": 190,
        "table": "college_1",
        "golden_query": "SELECT dept_address FROM department WHERE dept_name  =  'History'",
        "prediction": "SELECT dept_address FROM department JOIN course ON dept_code = dept_code WHERE dept_name = 'history'",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "Where is the history department?"
    },
    {
        "example_number": 191,
        "table": "college_1",
        "golden_query": "SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'",
        "prediction": "SELECT DISTINCT class_room FROM class JOIN department ON class_code = dept_address WHERE school_code = 'BUS'",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing Column: count(dept_address)",
            "Extra Column: class_room"
        ],
        "question": "What are the different locations of the school with the code BUS?"
    },
    {
        "example_number": 192,
        "table": "college_1",
        "golden_query": "SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code",
        "prediction": "SELECT COUNT( DISTINCT school_code ) FROM department",
        "errors_detected": [
            "Missing Column: count(dept_address)",
            "Extra Aggregation Function: count(school_code)"
        ],
        "question": "Count different addresses of each school."
    },
    {
        "example_number": 193,
        "table": "college_1",
        "golden_query": "SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code",
        "prediction": "SELECT school_code , COUNT( DISTINCT dept_address ) FROM department GROUP BY school_code",
        "errors_detected": [
            "unclassified"
        ],
        "question": "Count different addresses of each school."
    },
    {
        "example_number": 194,
        "table": "college_1",
        "golden_query": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'",
        "prediction": "SELECT crs_description , crs_credit FROM course WHERE crs_code = 'QM-261'",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What is the course description and number of credits for QM-261?"
    },
    {
        "example_number": 195,
        "table": "college_1",
        "golden_query": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'",
        "prediction": "SELECT crs_description , crs_credit FROM course WHERE crs_code = 'QM-261'",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What is the course description and number of credits for QM-261?"
    },
    {
        "example_number": 196,
        "table": "college_1",
        "golden_query": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code",
        "prediction": "SELECT COUNT( * ) , school_code FROM department GROUP BY school_code",
        "errors_detected": [
            "Missing Column: count(dept_name)",
            "Extra Column: count(None)",
            "Missing DISTINCT Keyword"
        ],
        "question": "How many departments are in each school?"
    },
    {
        "example_number": 197,
        "table": "college_1",
        "golden_query": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code",
        "prediction": "SELECT COUNT( * ) , school_code FROM department GROUP BY school_code",
        "errors_detected": [
            "Missing Column: count(dept_name)",
            "Extra Column: count(None)",
            "Missing DISTINCT Keyword"
        ],
        "question": "How many departments are in each school?"
    },
    {
        "example_number": 198,
        "table": "college_1",
        "golden_query": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5",
        "prediction": "SELECT COUNT( * ) , school_code FROM department GROUP BY school_code HAVING COUNT( * ) >= 5",
        "errors_detected": [
            "Missing Column: count(dept_name)",
            "Extra Column: count(None)",
            "Missing DISTINCT Keyword"
        ],
        "question": "How many different departments are there in each school that has less than 5 apartments?"
    },
    {
        "example_number": 199,
        "table": "college_1",
        "golden_query": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5",
        "prediction": "SELECT COUNT( * ) , school_code FROM department JOIN student ON dept_code = dept_code GROUP BY school_code HAVING COUNT( * )<5",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing Column: count(dept_name)",
            "Extra Column: count(None)",
            "Missing DISTINCT Keyword"
        ],
        "question": "How many different departments are there in each school that has less than 5 apartments?"
    },
    {
        "example_number": 200,
        "table": "college_1",
        "golden_query": "SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code",
        "prediction": "SELECT crs_code , COUNT( DISTINCT class_section ) FROM class GROUP BY crs_code",
        "errors_detected": [
            "Missing Column: count(None)",
            "Extra Column: count(class_section)",
            "Redundant DISTINCT Keyword"
        ],
        "question": "How many sections does each course have?"
    },
    {
        "example_number": 201,
        "table": "college_1",
        "golden_query": "SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code",
        "prediction": "SELECT crs_code , COUNT( DISTINCT class_section ) FROM class GROUP BY crs_code",
        "errors_detected": [
            "Missing Column: count(None)",
            "Extra Column: count(class_section)",
            "Redundant DISTINCT Keyword"
        ],
        "question": "How many sections does each course have?"
    },
    {
        "example_number": 202,
        "table": "college_1",
        "golden_query": "SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code",
        "prediction": "SELECT SUM( crs_credit ) FROM course",
        "errors_detected": [
            "Missing Column: dept_code"
        ],
        "question": "How many credits does the department offer?"
    },
    {
        "example_number": 203,
        "table": "college_1",
        "golden_query": "SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code",
        "prediction": "SELECT SUM( crs_credit ) FROM course",
        "errors_detected": [
            "Missing Column: dept_code"
        ],
        "question": "How many credits does the department offer?"
    },
    {
        "example_number": 204,
        "table": "college_1",
        "golden_query": "SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2",
        "prediction": "SELECT class_room , COUNT( * ) FROM class GROUP BY class_room HAVING COUNT( * ) >= 2",
        "errors_detected": [
            "unclassified"
        ],
        "question": "For each classroom with at least 2 classes, how many classes are offered?"
    },
    {
        "example_number": 205,
        "table": "college_1",
        "golden_query": "SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2",
        "prediction": "SELECT class_room , COUNT( * ) FROM class GROUP BY class_room HAVING COUNT( * ) >= 2",
        "errors_detected": [
            "unclassified"
        ],
        "question": "For each classroom with at least 2 classes, how many classes are offered?"
    },
    {
        "example_number": 206,
        "table": "college_1",
        "golden_query": "SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code",
        "prediction": "SELECT COUNT( * ) , dept_code FROM professor WHERE prof_high_degree = 'D' GROUP BY dept_code",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "How many professors have a Ph.D. in each department?"
    },
    {
        "example_number": 207,
        "table": "college_1",
        "golden_query": "SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code",
        "prediction": "SELECT dept_code , COUNT( * ) FROM professor WHERE prof_high_degree = 'D' GROUP BY dept_code",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "How many professors have a Ph.D. in each department?"
    },
    {
        "example_number": 208,
        "table": "college_1",
        "golden_query": "SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code",
        "prediction": "SELECT dept_code , SUM( stu_hrs ) FROM student GROUP BY dept_code",
        "errors_detected": [
            "unclassified"
        ],
        "question": "How many hours do the students spend studying in each department?"
    },
    {
        "example_number": 209,
        "table": "college_1",
        "golden_query": "SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code",
        "prediction": "SELECT AVG( stu_gpa ) , MAX( stu_gpa ) , MIN( stu_gpa ) , dept_code FROM student GROUP BY dept_code",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What is the highest, lowest, and average student GPA for every department?"
    },
    {
        "example_number": 210,
        "table": "college_1",
        "golden_query": "SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code",
        "prediction": "SELECT MAX( stu_gpa ) , MIN( stu_gpa ) , AVG( stu_gpa ) FROM student",
        "errors_detected": [
            "Aggregation Function Mismatch for Column 'stu_gpa': Expected 'min', Found 'avg'",
            "Missing Column: dept_code"
        ],
        "question": "What is the highest, lowest, and average student GPA for every department?"
    },
    {
        "example_number": 211,
        "table": "college_1",
        "golden_query": "SELECT count(DISTINCT school_code) FROM department",
        "prediction": "SELECT COUNT( * ) FROM department",
        "errors_detected": [
            "Missing Column: count(school_code)",
            "Extra Column: count(None)",
            "Missing DISTINCT Keyword"
        ],
        "question": "How many schools are there in the department?"
    },
    {
        "example_number": 212,
        "table": "college_1",
        "golden_query": "SELECT count(DISTINCT crs_code) FROM CLASS",
        "prediction": "SELECT COUNT( * ) FROM course",
        "errors_detected": [
            "Missing Column: count(crs_code)",
            "Extra Column: count(None)",
            "Missing DISTINCT Keyword"
        ],
        "question": "What are the number of different course codes?"
    },
    {
        "example_number": 213,
        "table": "college_1",
        "golden_query": "SELECT count(DISTINCT crs_code) FROM CLASS",
        "prediction": "SELECT COUNT( DISTINCT crs_code ) FROM course",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the number of different course codes?"
    },
    {
        "example_number": 214,
        "table": "college_1",
        "golden_query": "SELECT count(DISTINCT dept_name) FROM department",
        "prediction": "SELECT COUNT( * ) FROM department WHERE school_code = 'college'",
        "errors_detected": [
            "Missing Column: count(dept_name)",
            "Extra Column: count(None)",
            "Redundant WHERE Clause",
            "Missing DISTINCT Keyword"
        ],
        "question": "How many different departments are there?"
    },
    {
        "example_number": 215,
        "table": "college_1",
        "golden_query": "SELECT count(DISTINCT dept_name) FROM department",
        "prediction": "SELECT COUNT( * ) FROM department",
        "errors_detected": [
            "Missing Column: count(dept_name)",
            "Extra Column: count(None)",
            "Missing DISTINCT Keyword"
        ],
        "question": "How many different departments are there?"
    },
    {
        "example_number": 216,
        "table": "college_1",
        "golden_query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'",
        "prediction": "SELECT COUNT( * ) FROM professor WHERE prof_high_degree = 'D'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What is the total number of professors with a Ph.D. ?"
    },
    {
        "example_number": 217,
        "table": "college_1",
        "golden_query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'",
        "prediction": "SELECT COUNT( * ) FROM professor WHERE prof_high_degree = 1",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What is the total number of professors with a Ph.D. ?"
    },
    {
        "example_number": 218,
        "table": "college_1",
        "golden_query": "SELECT class_code FROM CLASS WHERE class_room  =  'KLR209'",
        "prediction": "SELECT crs_code FROM class WHERE class_room = 'KLR209'",
        "errors_detected": [
            "Missing Column: class_code",
            "Extra Column: crs_code"
        ],
        "question": "What are the codes of all the courses that are located in room KLR209?"
    },
    {
        "example_number": 219,
        "table": "college_1",
        "golden_query": "SELECT class_code FROM CLASS WHERE class_room  =  'KLR209'",
        "prediction": "SELECT crs_code FROM class WHERE class_room = 'KLR209'",
        "errors_detected": [
            "Missing Column: class_code",
            "Extra Column: crs_code"
        ],
        "question": "What are the codes of all the courses that are located in room KLR209?"
    },
    {
        "example_number": 220,
        "table": "college_1",
        "golden_query": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' ORDER BY emp_dob",
        "prediction": "SELECT emp_fname FROM employee JOIN professor ON emp_num = emp_num WHERE prof_office = 'professors' ORDER BY emp_dob ASC",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "What are the first names of all employees that are professors ordered by date of birth?"
    },
    {
        "example_number": 221,
        "table": "college_1",
        "golden_query": "SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1",
        "prediction": "SELECT emp_fname , emp_lname FROM employee ORDER BY emp_dob DESC LIMIT 1",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the first and last names of the employee with the earliest date of birth?"
    },
    {
        "example_number": 222,
        "table": "college_1",
        "golden_query": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1",
        "prediction": "SELECT stu_fname , stu_lname FROM student WHERE stu_gpa > 3 ORDER BY stu_dob ASC LIMIT 1",
        "errors_detected": [
            "Missing Column: stu_gpa"
        ],
        "question": "What is the first and last name of the youngest student with a GPA above 3, and what is their GPA?"
    },
    {
        "example_number": 223,
        "table": "college_1",
        "golden_query": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1",
        "prediction": "SELECT stu_fname , stu_lname FROM student WHERE stu_gpa > 3",
        "errors_detected": [
            "Missing Column: stu_gpa",
            "Missing ORDER BY Clause"
        ],
        "question": "What is the first and last name of the youngest student with a GPA above 3, and what is their GPA?"
    },
    {
        "example_number": 224,
        "table": "college_1",
        "golden_query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'",
        "prediction": "SELECT COUNT( * ) FROM professor WHERE prof_high_degree = 'D' OR prof_high_degree = 'MA'",
        "errors_detected": [
            "Wrong Key Value",
            "Wrong Key Value",
            "Wrong Key Value"
        ],
        "question": "How many professors attained either Ph.D. or Masters degrees?"
    },
    {
        "example_number": 225,
        "table": "college_1",
        "golden_query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'",
        "prediction": "SELECT COUNT( * ) FROM professor WHERE prof_high_degree = 'D' OR prof_high_degree = 'Masters'",
        "errors_detected": [
            "Wrong Key Value",
            "Wrong Key Value",
            "Wrong Key Value",
            "Wrong Key Value"
        ],
        "question": "How many professors attained either Ph.D. or Masters degrees?"
    },
    {
        "example_number": 226,
        "table": "college_1",
        "golden_query": "SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5",
        "prediction": "SELECT stu_fname , stu_gpa , stu_phone FROM student ORDER BY stu_gpa DESC LIMIT 5",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What is the first name, GPA, and phone number of the students with the top 5 GPAs?"
    },
    {
        "example_number": 227,
        "table": "college_1",
        "golden_query": "SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5",
        "prediction": "SELECT stu_fname , stu_gpa , stu_phone FROM student ORDER BY stu_gpa DESC LIMIT 5",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What is the first name, GPA, and phone number of the students with the top 5 GPAs?"
    },
    {
        "example_number": 228,
        "table": "college_1",
        "golden_query": "SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)",
        "prediction": "SELECT stu_fname FROM student WHERE stu_gpa<(SELECT AVG( stu_gpa ) FROM student)",
        "errors_detected": [
            "Missing Column: stu_gpa"
        ],
        "question": "What is the first name and GPA of every student that has a GPA lower than average?"
    },
    {
        "example_number": 229,
        "table": "college_1",
        "golden_query": "SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)",
        "prediction": "SELECT AVG( stu_gpa ) FROM student",
        "errors_detected": [
            "Missing Column: stu_fname",
            "Extra Aggregation Function: avg(stu_gpa)",
            "Missing WHERE Clause"
        ],
        "question": "What is the first name and GPA of every student that has a GPA lower than average?"
    },
    {
        "example_number": 230,
        "table": "manufacturer",
        "golden_query": "SELECT sum(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2",
        "prediction": "SELECT SUM( market_rate ) FROM furniture",
        "errors_detected": [
            "Missing ORDER BY Clause"
        ],
        "question": "find the total market rate of the furnitures that have the top 2 market shares."
    },
    {
        "example_number": 231,
        "table": "manufacturer",
        "golden_query": "SELECT name ,  Num_of_Component FROM furniture ORDER BY market_rate LIMIT 1",
        "prediction": "SELECT name , num_of_component FROM furniture",
        "errors_detected": [
            "Missing ORDER BY Clause"
        ],
        "question": "Find the name and component amount of the least popular furniture."
    },
    {
        "example_number": 232,
        "table": "manufacturer",
        "golden_query": "SELECT open_year ,  name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1",
        "prediction": "SELECT name , open_year FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1",
        "errors_detected": [
            "unclassified"
        ],
        "question": "Which manufacturer has the most number of shops? List its name and year of opening."
    },
    {
        "example_number": 233,
        "table": "manufacturer",
        "golden_query": "SELECT name ,  open_year FROM manufacturer WHERE num_of_shops  >  10 OR Num_of_Factories  <  10",
        "prediction": "SELECT name , open_year FROM manufacturer WHERE num_of_factories<10 OR num_of_shops > 10",
        "errors_detected": [
            "unclassified"
        ],
        "question": "Give me the name and year of opening of the manufacturers that have either less than 10 factories or more than 10 shops."
    },
    {
        "example_number": 234,
        "table": "manufacturer",
        "golden_query": "SELECT max(num_of_shops) ,  avg(Num_of_Factories) FROM manufacturer WHERE open_year  <  1990",
        "prediction": "SELECT AVG( num_of_factories ) , MAX( num_of_shops ) FROM manufacturer WHERE open_year<1990",
        "errors_detected": [
            "unclassified"
        ],
        "question": "what is the average number of factories and maximum number of shops for manufacturers that opened before 1990."
    },
    {
        "example_number": 235,
        "table": "music_1",
        "golden_query": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1",
        "prediction": "SELECT song_name FROM song ORDER BY releasedate DESC LIMIT 1",
        "errors_detected": [
            "Missing Column: releasedate"
        ],
        "question": "What is the name of the song that was released most recently?"
    },
    {
        "example_number": 236,
        "table": "music_1",
        "golden_query": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1",
        "prediction": "SELECT song_name FROM song ORDER BY releasedate DESC LIMIT 1",
        "errors_detected": [
            "Missing Column: releasedate"
        ],
        "question": "What is the name of the song that was released most recently?"
    },
    {
        "example_number": 237,
        "table": "music_1",
        "golden_query": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1",
        "prediction": "SELECT f_id FROM song ORDER BY resolution DESC LIMIT 1",
        "errors_detected": [
            "unclassified"
        ],
        "question": "Find the id of the song that lasts the longest."
    },
    {
        "example_number": 238,
        "table": "music_1",
        "golden_query": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1",
        "prediction": "SELECT f_id FROM song JOIN files ON f_id = f_id ORDER BY duration DESC LIMIT 1",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "Find the id of the song that lasts the longest."
    },
    {
        "example_number": 239,
        "table": "music_1",
        "golden_query": "SELECT f_id FROM files WHERE formats  =  \"mp3\"",
        "prediction": "SELECT f_id FROM files, song WHERE formats = 'mp3'",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the id of all the files in mp3 format?"
    },
    {
        "example_number": 240,
        "table": "music_1",
        "golden_query": "SELECT f_id FROM files WHERE formats  =  \"mp3\"",
        "prediction": "SELECT formats FROM files WHERE formats = 'mp3'",
        "errors_detected": [
            "Missing Column: f_id",
            "Extra Column: formats"
        ],
        "question": "What are the id of all the files in mp3 format?"
    },
    {
        "example_number": 241,
        "table": "music_1",
        "golden_query": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
        "prediction": "SELECT artist_name FROM song ORDER BY resolution ASC LIMIT 1",
        "errors_detected": [
            "Missing Column: count(None)",
            "Extra Column: artist_name",
            "Missing WHERE Clause",
            "Redundant ORDER BY Clause"
        ],
        "question": "What is the count of the songs that last approximately 4 minutes?"
    },
    {
        "example_number": 242,
        "table": "music_1",
        "golden_query": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
        "prediction": "SELECT artist_name FROM song ORDER BY resolution ASC LIMIT 1",
        "errors_detected": [
            "Missing Column: count(None)",
            "Extra Column: artist_name",
            "Missing WHERE Clause",
            "Redundant ORDER BY Clause"
        ],
        "question": "What is the count of the songs that last approximately 4 minutes?"
    },
    {
        "example_number": 243,
        "table": "music_1",
        "golden_query": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"",
        "prediction": "SELECT COUNT( * ) FROM artist WHERE country = 'Bangladeshi'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "How many Bangladeshi artists are listed?"
    },
    {
        "example_number": 244,
        "table": "music_1",
        "golden_query": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "prediction": "SELECT artist_name FROM artist JOIN song ON artist_name = artist_name WHERE country = 'UK' AND languages = 'English'",
        "errors_detected": [
            "Extra JOIN Operation",
            "Wrong Key Value"
        ],
        "question": "What are the names of the artists that are from the UK and sang songs in English?"
    },
    {
        "example_number": 245,
        "table": "music_1",
        "golden_query": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "prediction": "SELECT artist_name FROM artist JOIN song ON country = artist_name WHERE country = 'UK' AND languages = 'English'",
        "errors_detected": [
            "Extra JOIN Operation",
            "Wrong Key Value"
        ],
        "question": "What are the names of the artists that are from the UK and sang songs in English?"
    },
    {
        "example_number": 246,
        "table": "music_1",
        "golden_query": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000",
        "prediction": "SELECT f_id FROM song WHERE formats = 'mp4' AND resolution<1000",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What is the id of the files that are available in the format of mp4 and a resolution smaller than 1000?"
    },
    {
        "example_number": 247,
        "table": "music_1",
        "golden_query": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000",
        "prediction": "SELECT * FROM files JOIN song ON f_id = f_id WHERE formats = 'mp4' AND resolution<1000",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing Column: f_id",
            "Extra Column: *",
            "Wrong Key Value"
        ],
        "question": "What is the id of the files that are available in the format of mp4 and a resolution smaller than 1000?"
    },
    {
        "example_number": 248,
        "table": "music_1",
        "golden_query": "SELECT count(*) ,  gender FROM artist GROUP BY gender",
        "prediction": "SELECT gender , COUNT( * ) FROM artist GROUP BY gender",
        "errors_detected": [
            "unclassified"
        ],
        "question": "How many artists are male and how many are female?"
    },
    {
        "example_number": 249,
        "table": "music_1",
        "golden_query": "SELECT count(*) ,  gender FROM artist GROUP BY gender",
        "prediction": "SELECT COUNT( * ) FROM artist WHERE gender = 'f'",
        "errors_detected": [
            "Missing Column: gender",
            "Redundant WHERE Clause"
        ],
        "question": "How many artists are male and how many are female?"
    },
    {
        "example_number": 250,
        "table": "music_1",
        "golden_query": "SELECT avg(rating) ,  languages FROM song GROUP BY languages",
        "prediction": "SELECT languages , AVG( rating ) FROM song GROUP BY languages",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What is the average song rating for each language?"
    },
    {
        "example_number": 251,
        "table": "music_1",
        "golden_query": "SELECT avg(rating) ,  languages FROM song GROUP BY languages",
        "prediction": "SELECT languages , AVG( rating ) FROM song GROUP BY languages",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What is the average song rating for each language?"
    },
    {
        "example_number": 252,
        "table": "music_1",
        "golden_query": "SELECT count(*) ,  formats FROM files GROUP BY formats",
        "prediction": "SELECT formats , COUNT( * ) FROM files JOIN song ON f_id = f_id GROUP BY formats",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "How many songs were released for each format?"
    },
    {
        "example_number": 253,
        "table": "music_1",
        "golden_query": "SELECT count(*) ,  formats FROM files GROUP BY formats",
        "prediction": "SELECT formats , COUNT( * ) FROM song JOIN files ON f_id = f_id GROUP BY formats",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "How many songs were released for each format?"
    },
    {
        "example_number": 254,
        "table": "music_1",
        "golden_query": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")",
        "prediction": "SELECT DISTINCT song_name FROM song WHERE languages NOT IN (SELECT song_name FROM song WHERE languages = 'English')",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the different names for all songs that have a higher resolution than English songs?"
    },
    {
        "example_number": 255,
        "table": "music_1",
        "golden_query": "SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  \"blues\")",
        "prediction": "genre , genre",
        "errors_detected": [
            "Missing Column: song_name",
            "Missing WHERE Clause"
        ],
        "question": "What are the names of the songs that have a lower rating than at least one blues song?"
    },
    {
        "example_number": 256,
        "table": "music_1",
        "golden_query": "SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  \"blues\")",
        "prediction": "SELECT song_name FROM song JOIN genre ON genre_is = g_name WHERE rating<(SELECT AVG( rating ) FROM genre)",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "What are the names of the songs that have a lower rating than at least one blues song?"
    },
    {
        "example_number": 257,
        "table": "music_1",
        "golden_query": "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
        "prediction": "SELECT languages FROM song WHERE resolution > 500 GROUP BY languages ORDER BY COUNT( * ) DESC LIMIT 1",
        "errors_detected": [
            "Missing Column: artist_name",
            "Extra Column: languages"
        ],
        "question": "What is the name of the artist, for each language, that has the most songs with a higher resolution than 500?"
    },
    {
        "example_number": 258,
        "table": "music_1",
        "golden_query": "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
        "prediction": "SELECT artist_name , languages FROM song WHERE resolution > 500 GROUP BY languages ORDER BY COUNT( * ) DESC LIMIT 1",
        "errors_detected": [
            "Extra Column: languages"
        ],
        "question": "What is the name of the artist, for each language, that has the most songs with a higher resolution than 500?"
    },
    {
        "example_number": 259,
        "table": "music_1",
        "golden_query": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\"",
        "prediction": "SELECT artist_name FROM artist WHERE gender = 'Male' AND country = 'UK'",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the names of all male British artists?"
    },
    {
        "example_number": 260,
        "table": "music_1",
        "golden_query": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\"",
        "prediction": "SELECT artist_name FROM artist WHERE gender = 'm'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What are the names of all male British artists?"
    },
    {
        "example_number": 261,
        "table": "music_1",
        "golden_query": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)",
        "prediction": "SELECT f_id FROM song WHERE rating<(SELECT MAX( resolution ) FROM song WHERE rating<8)",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What is the id of every song that has a resolution higher than that of a song with a rating below 8?"
    },
    {
        "example_number": 262,
        "table": "music_1",
        "golden_query": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)",
        "prediction": "SELECT f_id FROM song WHERE resolution > (SELECT resolution FROM song WHERE rating<8)",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What is the id of every song that has a resolution higher than that of a song with a rating below 8?"
    },
    {
        "example_number": 263,
        "table": "music_1",
        "golden_query": "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")",
        "prediction": "SELECT f_id FROM song WHERE resolution > (SELECT AVG( resolution ) FROM song)",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What are the ids of all songs that have higher resolution of the average resolution in the modern genre?"
    },
    {
        "example_number": 264,
        "table": "music_1",
        "golden_query": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating",
        "prediction": "SELECT f_id , g_name , artist_name FROM song JOIN genre ON genre_is = g_name WHERE languages = 'English' ORDER BY rating ASC",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing Column: genre_is",
            "Extra Column: g_name"
        ],
        "question": "What is the id, genre, and name of the artist for every English song ordered by ascending rating?"
    },
    {
        "example_number": 265,
        "table": "music_1",
        "golden_query": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating",
        "prediction": "SELECT f_id , genre_is , artist_name FROM song JOIN genre ON f_id = g_name ORDER BY rating ASC",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing WHERE Clause"
        ],
        "question": "What is the id, genre, and name of the artist for every English song ordered by ascending rating?"
    },
    {
        "example_number": 266,
        "table": "music_1",
        "golden_query": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8",
        "prediction": "SELECT artist_name FROM artist WHERE languages = 'English' EXCEPT SELECT artist_name FROM song JOIN genre ON artist_name = g_name WHERE languages = 'English' AND rating > 8",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing DISTINCT Keyword"
        ],
        "question": "What are the names of the different artists that have produced a song in English but have never receieved a rating higher than 8?"
    },
    {
        "example_number": 267,
        "table": "music_1",
        "golden_query": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8",
        "prediction": "SELECT artist_name FROM artist WHERE languages = 'English' EXCEPT SELECT DISTINCT artist_name FROM song WHERE languages = 'English' AND rating > 8",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the names of the different artists that have produced a song in English but have never receieved a rating higher than 8?"
    },
    {
        "example_number": 268,
        "table": "music_1",
        "golden_query": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7",
        "prediction": "artist , genre",
        "errors_detected": [
            "Missing Column: artist_name",
            "Missing WHERE Clause",
            "Missing DISTINCT Keyword"
        ],
        "question": "What are the names of the different artists from Bangladesh who never received a rating higher than a 7?"
    },
    {
        "example_number": 269,
        "table": "music_1",
        "golden_query": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7",
        "prediction": "SELECT artist_name FROM artist WHERE country = 'Bangladesh'",
        "errors_detected": [
            "Missing DISTINCT Keyword"
        ],
        "question": "What are the names of the different artists from Bangladesh who never received a rating higher than a 7?"
    },
    {
        "example_number": 270,
        "table": "mountain_photos",
        "golden_query": "SELECT max(height) ,  avg(height) FROM mountain",
        "prediction": "SELECT MAX( height ) , MIN( height ) FROM mountain",
        "errors_detected": [
            "Aggregation Function Mismatch for Column 'height': Expected 'avg', Found 'min'"
        ],
        "question": "What are the maximum and average height of the mountains?"
    },
    {
        "example_number": 271,
        "table": "hospital_1",
        "golden_query": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1",
        "prediction": "SELECT name FROM department GROUP BY departmentid ORDER BY COUNT( * ) DESC LIMIT 1",
        "errors_detected": [
            "unclassified"
        ],
        "question": "Find the department with the most employees."
    },
    {
        "example_number": 272,
        "table": "hospital_1",
        "golden_query": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1",
        "prediction": "SELECT name FROM department GROUP BY departmentid ORDER BY COUNT( * ) DESC LIMIT 1",
        "errors_detected": [
            "unclassified"
        ],
        "question": "Find the department with the most employees."
    },
    {
        "example_number": 273,
        "table": "hospital_1",
        "golden_query": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1",
        "prediction": "SELECT head FROM department GROUP BY head ORDER BY COUNT( * ) ASC LIMIT 1",
        "errors_detected": [
            "Wrong GROUP BY Condition"
        ],
        "question": "Tell me the employee id of the head of the department with the least employees."
    },
    {
        "example_number": 274,
        "table": "hospital_1",
        "golden_query": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1",
        "prediction": "SELECT head FROM department GROUP BY head ORDER BY COUNT( * ) ASC LIMIT 1",
        "errors_detected": [
            "Wrong GROUP BY Condition"
        ],
        "question": "Tell me the employee id of the head of the department with the least employees."
    },
    {
        "example_number": 275,
        "table": "hospital_1",
        "golden_query": "SELECT count(patient) FROM stay WHERE room  =  112",
        "prediction": "SELECT COUNT( * ) FROM stay WHERE room = 112",
        "errors_detected": [
            "Missing Column: count(patient)",
            "Extra Column: count(None)"
        ],
        "question": "Count the number of patients who stayed in room 112."
    },
    {
        "example_number": 276,
        "table": "hospital_1",
        "golden_query": "SELECT count(patient) FROM stay WHERE room  =  112",
        "prediction": "SELECT COUNT( * ) FROM stay WHERE room = 112",
        "errors_detected": [
            "Missing Column: count(patient)",
            "Extra Column: count(None)"
        ],
        "question": "Count the number of patients who stayed in room 112."
    },
    {
        "example_number": 277,
        "table": "hospital_1",
        "golden_query": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1",
        "prediction": "SELECT patient FROM stay WHERE room = 111 ORDER BY stayend DESC LIMIT 1",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What is the id of the patient who stayed in room 111 most recently?"
    },
    {
        "example_number": 278,
        "table": "hospital_1",
        "golden_query": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1",
        "prediction": "SELECT patient FROM stay WHERE room = 111 ORDER BY stayend DESC LIMIT 1",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What is the id of the patient who stayed in room 111 most recently?"
    },
    {
        "example_number": 279,
        "table": "hospital_1",
        "golden_query": "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0",
        "prediction": "SELECT COUNT( DISTINCT blockcode ) FROM room",
        "errors_detected": [
            "Extra Aggregation Function: count(blockcode)",
            "Missing WHERE Clause"
        ],
        "question": "Tell me the distinct block codes where some rooms are available."
    },
    {
        "example_number": 280,
        "table": "hospital_1",
        "golden_query": "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0",
        "prediction": "SELECT DISTINCT blockcode FROM room",
        "errors_detected": [
            "Missing WHERE Clause"
        ],
        "question": "Tell me the distinct block codes where some rooms are available."
    },
    {
        "example_number": 281,
        "table": "hospital_1",
        "golden_query": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1",
        "prediction": "SELECT name FROM patient JOIN appointment ON ssn = patient GROUP BY patient ORDER BY end DESC LIMIT 1",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing Column: patient",
            "Extra Column: name"
        ],
        "question": "Which patient is undergoing the most recent treatment?"
    },
    {
        "example_number": 282,
        "table": "hospital_1",
        "golden_query": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1",
        "prediction": "SELECT name FROM appointment JOIN patient ON patient = ssn ORDER BY end DESC LIMIT 1",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing Column: patient",
            "Extra Column: name"
        ],
        "question": "Which patient is undergoing the most recent treatment?"
    },
    {
        "example_number": 283,
        "table": "hospital_1",
        "golden_query": "SELECT name FROM procedures ORDER BY cost LIMIT 3",
        "prediction": "SELECT cost FROM procedures ORDER BY cost DESC LIMIT 3",
        "errors_detected": [
            "Missing Column: name",
            "Extra Column: cost"
        ],
        "question": "What are the three most costly procedures?"
    },
    {
        "example_number": 284,
        "table": "hospital_1",
        "golden_query": "SELECT name FROM procedures ORDER BY cost LIMIT 3",
        "prediction": "SELECT cost FROM procedures ORDER BY cost DESC LIMIT 3",
        "errors_detected": [
            "Missing Column: name",
            "Extra Column: cost"
        ],
        "question": "What are the three most costly procedures?"
    },
    {
        "example_number": 285,
        "table": "student_1",
        "golden_query": "SELECT DISTINCT firstname FROM list WHERE classroom  =  107",
        "prediction": "SELECT firstname FROM list WHERE classroom = 107",
        "errors_detected": [
            "Missing DISTINCT Keyword"
        ],
        "question": "List the first names of all the students in room 107."
    },
    {
        "example_number": 286,
        "table": "student_1",
        "golden_query": "SELECT DISTINCT firstname FROM list WHERE classroom  =  107",
        "prediction": "SELECT firstname FROM list WHERE classroom = 107",
        "errors_detected": [
            "Missing DISTINCT Keyword"
        ],
        "question": "List the first names of all the students in room 107."
    },
    {
        "example_number": 287,
        "table": "student_1",
        "golden_query": "SELECT DISTINCT classroom ,  grade FROM list",
        "prediction": "SELECT classroom , grade FROM list",
        "errors_detected": [
            "Missing DISTINCT Keyword"
        ],
        "question": "What are the grade number and classroom number of each class in the list?"
    },
    {
        "example_number": 288,
        "table": "student_1",
        "golden_query": "SELECT DISTINCT classroom ,  grade FROM list",
        "prediction": "SELECT grade , classroom FROM list",
        "errors_detected": [
            "Missing DISTINCT Keyword"
        ],
        "question": "What are the grade number and classroom number of each class in the list?"
    },
    {
        "example_number": 289,
        "table": "student_1",
        "golden_query": "SELECT DISTINCT grade FROM list WHERE classroom  =  103",
        "prediction": "SELECT grade FROM list WHERE classroom = 103",
        "errors_detected": [
            "Missing DISTINCT Keyword"
        ],
        "question": "Find the grade taught in classroom 103."
    },
    {
        "example_number": 290,
        "table": "student_1",
        "golden_query": "SELECT DISTINCT grade FROM list WHERE classroom  =  103",
        "prediction": "SELECT grade FROM list WHERE classroom = 103",
        "errors_detected": [
            "Missing DISTINCT Keyword"
        ],
        "question": "Find the grade taught in classroom 103."
    },
    {
        "example_number": 291,
        "table": "student_1",
        "golden_query": "SELECT DISTINCT grade FROM list WHERE classroom  =  105",
        "prediction": "SELECT grade FROM list WHERE classroom = 105",
        "errors_detected": [
            "Missing DISTINCT Keyword"
        ],
        "question": "Which grade is studying in room 105?"
    },
    {
        "example_number": 292,
        "table": "student_1",
        "golden_query": "SELECT DISTINCT grade FROM list WHERE classroom  =  105",
        "prediction": "SELECT grade FROM list WHERE classroom = 105",
        "errors_detected": [
            "Missing DISTINCT Keyword"
        ],
        "question": "Which grade is studying in room 105?"
    },
    {
        "example_number": 293,
        "table": "student_1",
        "golden_query": "SELECT DISTINCT classroom FROM list WHERE grade  =  4",
        "prediction": "SELECT classroom FROM list WHERE grade = 4",
        "errors_detected": [
            "Missing DISTINCT Keyword"
        ],
        "question": "Find the classrooms in which grade 4 is studying."
    },
    {
        "example_number": 294,
        "table": "student_1",
        "golden_query": "SELECT DISTINCT classroom FROM list WHERE grade  =  4",
        "prediction": "SELECT classroom FROM list WHERE grade = 4",
        "errors_detected": [
            "Missing DISTINCT Keyword"
        ],
        "question": "Find the classrooms in which grade 4 is studying."
    },
    {
        "example_number": 295,
        "table": "student_1",
        "golden_query": "SELECT DISTINCT classroom FROM list WHERE grade  =  5",
        "prediction": "SELECT classroom FROM list WHERE grade = 5",
        "errors_detected": [
            "Missing DISTINCT Keyword"
        ],
        "question": "Show me the classrooms grade 5 is using."
    },
    {
        "example_number": 296,
        "table": "student_1",
        "golden_query": "SELECT DISTINCT classroom FROM list WHERE grade  =  5",
        "prediction": "SELECT classroom FROM list WHERE grade = 5",
        "errors_detected": [
            "Missing DISTINCT Keyword"
        ],
        "question": "Show me the classrooms grade 5 is using."
    },
    {
        "example_number": 297,
        "table": "student_1",
        "golden_query": "SELECT DISTINCT firstname ,  lastname FROM teachers",
        "prediction": "SELECT firstname , lastname FROM teachers",
        "errors_detected": [
            "Missing DISTINCT Keyword"
        ],
        "question": "What are the first name and last name of all the teachers?"
    },
    {
        "example_number": 298,
        "table": "student_1",
        "golden_query": "SELECT DISTINCT firstname ,  lastname FROM teachers",
        "prediction": "SELECT firstname , lastname FROM teachers",
        "errors_detected": [
            "Missing DISTINCT Keyword"
        ],
        "question": "What are the first name and last name of all the teachers?"
    },
    {
        "example_number": 299,
        "table": "student_1",
        "golden_query": "SELECT DISTINCT firstname ,  lastname FROM list",
        "prediction": "SELECT firstname , lastname FROM list",
        "errors_detected": [
            "Missing DISTINCT Keyword"
        ],
        "question": "Show each student's first name and last name."
    },
    {
        "example_number": 300,
        "table": "student_1",
        "golden_query": "SELECT DISTINCT firstname ,  lastname FROM list",
        "prediction": "SELECT firstname , lastname FROM list",
        "errors_detected": [
            "Missing DISTINCT Keyword"
        ],
        "question": "Show each student's first name and last name."
    },
    {
        "example_number": 301,
        "table": "student_1",
        "golden_query": "SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade",
        "prediction": "SELECT COUNT( * ) , grade FROM list GROUP BY grade",
        "errors_detected": [
            "Missing Column: count(classroom)",
            "Missing DISTINCT Keyword"
        ],
        "question": "For each grade, return the grade number, the number of classrooms used for the grade, and the total number of students enrolled in the grade."
    },
    {
        "example_number": 302,
        "table": "student_1",
        "golden_query": "SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade",
        "prediction": "SELECT COUNT( * ) , COUNT( * ) , grade FROM list GROUP BY grade",
        "errors_detected": [
            "Duplicate Column Selection: count(None)",
            "Missing Column: count(classroom)",
            "Missing DISTINCT Keyword"
        ],
        "question": "For each grade, return the grade number, the number of classrooms used for the grade, and the total number of students enrolled in the grade."
    },
    {
        "example_number": 303,
        "table": "student_1",
        "golden_query": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom",
        "prediction": "SELECT classroom , COUNT( * ) , SUM( grade ) FROM list GROUP BY classroom",
        "errors_detected": [
            "Aggregation Function Mismatch for Column 'grade': Expected 'count', Found 'sum'",
            "Extra Column: count(None)",
            "Missing DISTINCT Keyword"
        ],
        "question": "For each classroom, show the classroom number and count the number of distinct grades that use the room."
    },
    {
        "example_number": 304,
        "table": "student_1",
        "golden_query": "SELECT classroom FROM list GROUP BY classroom ORDER BY count(*) DESC LIMIT 1",
        "prediction": "SELECT classroom FROM list ORDER BY classroom DESC LIMIT 1",
        "errors_detected": [
            "unclassified"
        ],
        "question": "Find the classroom that the most students use."
    },
    {
        "example_number": 305,
        "table": "student_1",
        "golden_query": "SELECT classroom ,  count(*) FROM list GROUP BY classroom",
        "prediction": "SELECT COUNT( * ) , classroom FROM list GROUP BY classroom",
        "errors_detected": [
            "unclassified"
        ],
        "question": "For each classroom, show the classroom number and find how many students are using it."
    },
    {
        "example_number": 306,
        "table": "student_1",
        "golden_query": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom",
        "prediction": "SELECT classroom , COUNT( * ) FROM list WHERE grade = 0 GROUP BY classroom",
        "errors_detected": [
            "unclassified"
        ],
        "question": "For each grade 0 classroom, return the classroom number and the count of students."
    },
    {
        "example_number": 307,
        "table": "student_1",
        "golden_query": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom",
        "prediction": "SELECT classroom , COUNT( * ) FROM list WHERE grade = 0 GROUP BY classroom",
        "errors_detected": [
            "unclassified"
        ],
        "question": "For each grade 0 classroom, return the classroom number and the count of students."
    },
    {
        "example_number": 308,
        "table": "student_1",
        "golden_query": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom",
        "prediction": "SELECT COUNT( * ) FROM list JOIN fourth ON grade = fourth GROUP BY classroom",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing Column: classroom",
            "Missing WHERE Clause"
        ],
        "question": "For each fourth-grade classroom, show the classroom number and the total number of students using it."
    },
    {
        "example_number": 309,
        "table": "student_1",
        "golden_query": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom",
        "prediction": "SELECT classroom , COUNT( * ) FROM list WHERE grade = 4 GROUP BY classroom",
        "errors_detected": [
            "unclassified"
        ],
        "question": "For each fourth-grade classroom, show the classroom number and the total number of students using it."
    },
    {
        "example_number": 310,
        "table": "film_rank",
        "golden_query": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000",
        "prediction": "SELECT studio FROM film GROUP BY studio HAVING AVG( gross_in_dollar ) > 4500000",
        "errors_detected": [
            "Wrong Operator in HAVING Clause"
        ],
        "question": "Which studios have an average gross of over 4500000?"
    },
    {
        "example_number": 311,
        "table": "film_rank",
        "golden_query": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000",
        "prediction": "SELECT studio FROM film GROUP BY studio HAVING AVG( gross_in_dollar ) > 4500000",
        "errors_detected": [
            "Wrong Operator in HAVING Clause"
        ],
        "question": "Which studios have an average gross of over 4500000?"
    },
    {
        "example_number": 312,
        "table": "company_office",
        "golden_query": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC",
        "prediction": "SELECT industry , COUNT( * ) FROM companies GROUP BY industry ORDER BY COUNT( * ) DESC",
        "errors_detected": [
            "Extra Column: count(None)"
        ],
        "question": "Sort all the industries in descending order of the count of companies in each industry"
    },
    {
        "example_number": 313,
        "table": "company_office",
        "golden_query": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC",
        "prediction": "SELECT industry , COUNT( * ) FROM companies GROUP BY industry ORDER BY COUNT( * ) DESC",
        "errors_detected": [
            "Extra Column: count(None)"
        ],
        "question": "Sort all the industries in descending order of the count of companies in each industry"
    },
    {
        "example_number": 314,
        "table": "aircraft",
        "golden_query": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"",
        "prediction": "SELECT SUM( international_passengers ) FROM airport WHERE airport_name = 'Heathrow'",
        "errors_detected": [
            "Extra Aggregation Function: sum(international_passengers)",
            "Missing Column: domestic_passengers",
            "Wrong Key Value"
        ],
        "question": "How many international and domestic passengers are there in the airport London Heathrow?"
    },
    {
        "example_number": 315,
        "table": "aircraft",
        "golden_query": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"",
        "prediction": "SELECT SUM( international_passengers ) , SUM( domestic_passengers ) FROM airport WHERE airport_name = 'London Heathrow'",
        "errors_detected": [
            "Extra Aggregation Function: sum(international_passengers)",
            "Extra Aggregation Function: sum(domestic_passengers)"
        ],
        "question": "How many international and domestic passengers are there in the airport London Heathrow?"
    },
    {
        "example_number": 316,
        "table": "aircraft",
        "golden_query": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"",
        "prediction": "SELECT SUM( domestic_passengers ) FROM airport WHERE airport_name = 'London'",
        "errors_detected": [
            "Missing LIKE Clause"
        ],
        "question": "What are the total number of domestic passengers at all London airports?"
    },
    {
        "example_number": 317,
        "table": "soccer_2",
        "golden_query": "SELECT avg(enr) FROM College",
        "prediction": "SELECT cname , AVG( enr ) FROM college GROUP BY cname",
        "errors_detected": [
            "Extra Column: cname"
        ],
        "question": "How many students, on average, does each college have enrolled?"
    },
    {
        "example_number": 318,
        "table": "soccer_2",
        "golden_query": "SELECT count(*) FROM College",
        "prediction": "SELECT COUNT( DISTINCT cname ) FROM college",
        "errors_detected": [
            "Missing Column: count(None)",
            "Extra Column: count(cname)",
            "Redundant DISTINCT Keyword"
        ],
        "question": "How many different colleges are there?"
    },
    {
        "example_number": 319,
        "table": "soccer_2",
        "golden_query": "SELECT count(DISTINCT pPos) FROM tryout",
        "prediction": "SELECT DISTINCT ppos FROM tryout",
        "errors_detected": [
            "Missing Aggregation Function: count(ppos)"
        ],
        "question": "What are the different types of player positions?"
    },
    {
        "example_number": 320,
        "table": "soccer_2",
        "golden_query": "SELECT count(*) FROM tryout WHERE decision  =  'yes'",
        "prediction": "SELECT COUNT( * ) FROM tryout WHERE decision = 'accepted'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "How many students received a yes from tryouts?"
    },
    {
        "example_number": 321,
        "table": "soccer_2",
        "golden_query": "SELECT count(*) FROM tryout WHERE decision  =  'yes'",
        "prediction": "SELECT COUNT( * ) FROM tryout JOIN player ON pid = pid WHERE ycard = 'yes'",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "How many students received a yes from tryouts?"
    },
    {
        "example_number": 322,
        "table": "soccer_2",
        "golden_query": "SELECT count(*) FROM tryout WHERE pPos  =  'goalie'",
        "prediction": "SELECT AVG( hs ) , MAX( hs ) , MIN( hs ) FROM player",
        "errors_detected": [
            "Missing Column: count(None)",
            "Extra Column: min(hs)",
            "Missing WHERE Clause"
        ],
        "question": "What is the number of students playing as a goalie?"
    },
    {
        "example_number": 323,
        "table": "soccer_2",
        "golden_query": "SELECT count(*) FROM tryout WHERE pPos  =  'goalie'",
        "prediction": "SELECT AVG( hs ) , MAX( hs ) , MIN( hs ) FROM player",
        "errors_detected": [
            "Missing Column: count(None)",
            "Extra Column: min(hs)",
            "Missing WHERE Clause"
        ],
        "question": "What is the number of students playing as a goalie?"
    },
    {
        "example_number": 324,
        "table": "soccer_2",
        "golden_query": "SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player",
        "prediction": "SELECT AVG( enr ) FROM college WHERE state = 'FL'",
        "errors_detected": [
            "Missing Column: min(hs)",
            "Extra Column: avg(enr)",
            "Redundant WHERE Clause"
        ],
        "question": "What is the average, maximum, and minimum for the number of hours spent training?"
    },
    {
        "example_number": 325,
        "table": "soccer_2",
        "golden_query": "SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player",
        "prediction": "SELECT AVG( enr ) FROM college WHERE state = 'Florida'",
        "errors_detected": [
            "Missing Column: min(hs)",
            "Extra Column: avg(enr)",
            "Redundant WHERE Clause"
        ],
        "question": "What is the average, maximum, and minimum for the number of hours spent training?"
    },
    {
        "example_number": 326,
        "table": "soccer_2",
        "golden_query": "SELECT avg(enr) FROM College WHERE state  =  'FL'",
        "prediction": "SELECT pname FROM player WHERE hs BETWEEN 500 and 1500",
        "errors_detected": [
            "Missing Column: avg(enr)",
            "Extra Column: pname"
        ],
        "question": "What is average number of students enrolled in Florida colleges?"
    },
    {
        "example_number": 327,
        "table": "soccer_2",
        "golden_query": "SELECT avg(enr) FROM College WHERE state  =  'FL'",
        "prediction": "SELECT pname FROM player WHERE hs BETWEEN 500 and 1500",
        "errors_detected": [
            "Missing Column: avg(enr)",
            "Extra Column: pname"
        ],
        "question": "What is average number of students enrolled in Florida colleges?"
    },
    {
        "example_number": 328,
        "table": "soccer_2",
        "golden_query": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500",
        "prediction": "SELECT pname FROM player WHERE pname LIKE '%a%'",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the names of players who train between 500 and 1500 hours?"
    },
    {
        "example_number": 329,
        "table": "soccer_2",
        "golden_query": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500",
        "prediction": "SELECT pname FROM player WHERE pname LIKE '%a%'",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the names of players who train between 500 and 1500 hours?"
    },
    {
        "example_number": 330,
        "table": "soccer_2",
        "golden_query": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'",
        "prediction": "SELECT cname , enr FROM college WHERE enr > 10000 AND state = 'LA'",
        "errors_detected": [
            "Missing Column: pname",
            "Extra Column: cname",
            "Extra Column: enr",
            "Missing LIKE Clause",
            "Missing DISTINCT Keyword"
        ],
        "question": "Who are the players that have names containing the letter a?"
    },
    {
        "example_number": 331,
        "table": "soccer_2",
        "golden_query": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'",
        "prediction": "SELECT cname , enr FROM college WHERE enr > 10000 AND state = 'Louisiana'",
        "errors_detected": [
            "Missing Column: pname",
            "Extra Column: cname",
            "Extra Column: enr",
            "Missing LIKE Clause",
            "Missing DISTINCT Keyword"
        ],
        "question": "Who are the players that have names containing the letter a?"
    },
    {
        "example_number": 332,
        "table": "soccer_2",
        "golden_query": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "prediction": "SELECT * FROM college ORDER BY enr ASC",
        "errors_detected": [
            "Missing Column: cname",
            "Missing Column: enr",
            "Extra Column: *",
            "Missing WHERE Clause",
            "Redundant ORDER BY Clause"
        ],
        "question": "What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?"
    },
    {
        "example_number": 333,
        "table": "soccer_2",
        "golden_query": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "prediction": "SELECT * FROM college ORDER BY enr ASC",
        "errors_detected": [
            "Missing Column: cname",
            "Missing Column: enr",
            "Extra Column: *",
            "Missing WHERE Clause",
            "Redundant ORDER BY Clause"
        ],
        "question": "What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?"
    },
    {
        "example_number": 334,
        "table": "soccer_2",
        "golden_query": "SELECT * FROM College ORDER BY enr",
        "prediction": "SELECT cname FROM college WHERE enr > 18000 ORDER BY cname ASC",
        "errors_detected": [
            "Missing Column: *",
            "Extra Column: cname",
            "Redundant WHERE Clause"
        ],
        "question": "What information do you have on colleges sorted by increasing enrollment numbers?"
    },
    {
        "example_number": 335,
        "table": "soccer_2",
        "golden_query": "SELECT * FROM College ORDER BY enr",
        "prediction": "SELECT cname FROM college WHERE enr > 18000 ORDER BY cname ASC",
        "errors_detected": [
            "Missing Column: *",
            "Extra Column: cname",
            "Redundant WHERE Clause"
        ],
        "question": "What information do you have on colleges sorted by increasing enrollment numbers?"
    },
    {
        "example_number": 336,
        "table": "soccer_2",
        "golden_query": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName",
        "prediction": "SELECT pname FROM player WHERE ycard = 'yes' ORDER BY hs DESC",
        "errors_detected": [
            "Missing Column: cname",
            "Extra Column: pname",
            "Wrong Key Value"
        ],
        "question": "What is the name of every college in alphabetical order that has more than 18000 students enrolled?"
    },
    {
        "example_number": 337,
        "table": "soccer_2",
        "golden_query": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName",
        "prediction": "SELECT pname FROM player ORDER BY hs DESC",
        "errors_detected": [
            "Missing Column: cname",
            "Extra Column: pname",
            "Missing WHERE Clause"
        ],
        "question": "What is the name of every college in alphabetical order that has more than 18000 students enrolled?"
    },
    {
        "example_number": 338,
        "table": "soccer_2",
        "golden_query": "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC",
        "prediction": "SELECT DISTINCT cname FROM tryout ORDER BY cname ASC",
        "errors_detected": [
            "Missing Column: pname",
            "Extra Column: cname",
            "Missing WHERE Clause",
            "Redundant DISTINCT Keyword"
        ],
        "question": "What are the name of the players who received a card in descending order of the hours of training?"
    },
    {
        "example_number": 339,
        "table": "soccer_2",
        "golden_query": "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC",
        "prediction": "SELECT DISTINCT cname FROM tryout ORDER BY cname ASC",
        "errors_detected": [
            "Missing Column: pname",
            "Extra Column: cname",
            "Missing WHERE Clause",
            "Redundant DISTINCT Keyword"
        ],
        "question": "What are the name of the players who received a card in descending order of the hours of training?"
    },
    {
        "example_number": 340,
        "table": "soccer_2",
        "golden_query": "SELECT DISTINCT cName FROM tryout ORDER BY cName",
        "prediction": "SELECT ppos FROM tryout GROUP BY ppos ORDER BY COUNT( * ) DESC LIMIT 1",
        "errors_detected": [
            "Missing Column: cname",
            "Extra Column: ppos",
            "Missing DISTINCT Keyword"
        ],
        "question": "What are the different names of the colleges involved in the tryout in alphabetical order?"
    },
    {
        "example_number": 341,
        "table": "soccer_2",
        "golden_query": "SELECT DISTINCT cName FROM tryout ORDER BY cName",
        "prediction": "SELECT ppos FROM tryout GROUP BY ppos ORDER BY COUNT( * ) DESC LIMIT 1",
        "errors_detected": [
            "Missing Column: cname",
            "Extra Column: ppos",
            "Missing DISTINCT Keyword"
        ],
        "question": "What are the different names of the colleges involved in the tryout in alphabetical order?"
    },
    {
        "example_number": 342,
        "table": "soccer_2",
        "golden_query": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1",
        "prediction": "SELECT cname , COUNT( * ) FROM tryout GROUP BY cname ORDER BY COUNT( * ) DESC",
        "errors_detected": [
            "Missing Column: ppos",
            "Extra Column: cname",
            "Extra Column: count(None)",
            "Wrong GROUP BY Condition"
        ],
        "question": "What was the most popular position at tryouts?"
    },
    {
        "example_number": 343,
        "table": "soccer_2",
        "golden_query": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1",
        "prediction": "SELECT cname , COUNT( * ) FROM tryout GROUP BY cname ORDER BY COUNT( * ) DESC",
        "errors_detected": [
            "Missing Column: ppos",
            "Extra Column: cname",
            "Extra Column: count(None)",
            "Wrong GROUP BY Condition"
        ],
        "question": "What was the most popular position at tryouts?"
    },
    {
        "example_number": 344,
        "table": "soccer_2",
        "golden_query": "SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC",
        "prediction": "SELECT cname FROM college ORDER BY enr DESC LIMIT 3",
        "errors_detected": [
            "Missing Column: count(None)"
        ],
        "question": "How many students participated in tryouts for each college by descennding count?"
    },
    {
        "example_number": 345,
        "table": "soccer_2",
        "golden_query": "SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC",
        "prediction": "SELECT cname FROM college ORDER BY enr DESC LIMIT 3",
        "errors_detected": [
            "Missing Column: count(None)"
        ],
        "question": "How many students participated in tryouts for each college by descennding count?"
    },
    {
        "example_number": 346,
        "table": "soccer_2",
        "golden_query": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3",
        "prediction": "SELECT cname , state , MIN( enr ) FROM college GROUP BY state",
        "errors_detected": [
            "Extra Column: state",
            "Extra Column: min(enr)",
            "Missing ORDER BY Clause"
        ],
        "question": "What are the names of the schools with the top 3 largest class sizes?"
    },
    {
        "example_number": 347,
        "table": "soccer_2",
        "golden_query": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3",
        "prediction": "SELECT cname FROM college ORDER BY enr ASC LIMIT 1",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the names of the schools with the top 3 largest class sizes?"
    },
    {
        "example_number": 348,
        "table": "soccer_2",
        "golden_query": "SELECT cName ,  state ,  min(enr) FROM college GROUP BY state",
        "prediction": "SELECT cname FROM college INTERSECT SELECT cname FROM college JOIN tryout ON enr = cname WHERE ppos = 'goalie'",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing Column: state",
            "Missing Column: min(enr)",
            "Redundant WHERE Clause"
        ],
        "question": "What is the name of the school with smallest enrollment size per state?"
    },
    {
        "example_number": 349,
        "table": "soccer_2",
        "golden_query": "SELECT cName ,  state ,  min(enr) FROM college GROUP BY state",
        "prediction": "SELECT cname FROM college JOIN tryout ON enr = pid JOIN player ON pid = pid WHERE ppos = 'goalie'",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing Column: state",
            "Missing Column: min(enr)",
            "Redundant WHERE Clause"
        ],
        "question": "What is the name of the school with smallest enrollment size per state?"
    },
    {
        "example_number": 350,
        "table": "soccer_2",
        "golden_query": "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'",
        "prediction": "SELECT state FROM college JOIN tryout ON cname = cname WHERE ppos = 'goalie' INTERSECT SELECT state FROM college JOIN tryout ON cname = cname WHERE ppos = 'mid'",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing Column: cname",
            "Extra Column: state",
            "Wrong Key Value"
        ],
        "question": "What college has a student who successfully made the team in the role of a goalie?"
    },
    {
        "example_number": 351,
        "table": "soccer_2",
        "golden_query": "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'",
        "prediction": "SELECT state FROM college JOIN tryout ON cname = cname WHERE ppos = 'goalie' INTERSECT SELECT state FROM college JOIN tryout ON cname = cname WHERE ppos = 'mid-field'",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing Column: cname",
            "Extra Column: state",
            "Wrong Key Value"
        ],
        "question": "What college has a student who successfully made the team in the role of a goalie?"
    },
    {
        "example_number": 352,
        "table": "soccer_2",
        "golden_query": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'",
        "prediction": "SELECT cname FROM college INTERSECT SELECT cname FROM college JOIN tryout ON enr = cname JOIN player ON pid = pid WHERE ppos = 'goalie'",
        "errors_detected": [
            "Extra JOIN Operation",
            "Wrong Key Value"
        ],
        "question": "What are the names of all schools that have students trying out for the position of goal and 'mid'-field."
    },
    {
        "example_number": 353,
        "table": "soccer_2",
        "golden_query": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'",
        "prediction": "SELECT cname FROM college INTERSECT SELECT cname FROM college JOIN tryout ON enr = cname JOIN player ON pid = pid WHERE ppos = 'mid'",
        "errors_detected": [
            "Extra JOIN Operation",
            "Wrong Key Value"
        ],
        "question": "What are the names of all schools that have students trying out for the position of goal and 'mid'-field."
    },
    {
        "example_number": 354,
        "table": "soccer_2",
        "golden_query": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')",
        "prediction": "SELECT state FROM college JOIN tryout ON cname = cname WHERE ppos = 'mid' EXCEPT SELECT state FROM college JOIN tryout ON cname = cname WHERE ppos = 'goalie'",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing Column: count(None)",
            "Extra Column: state",
            "Redundant WHERE Clause"
        ],
        "question": "How many schools have students playing in goalie and mid-field positions?"
    },
    {
        "example_number": 355,
        "table": "soccer_2",
        "golden_query": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')",
        "prediction": "SELECT state FROM college JOIN tryout ON cname = cname WHERE ppos = 'mid' EXCEPT SELECT state FROM college JOIN tryout ON cname = cname WHERE ppos = 'mid position but'",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing Column: count(None)",
            "Extra Column: state",
            "Redundant WHERE Clause"
        ],
        "question": "How many schools have students playing in goalie and mid-field positions?"
    },
    {
        "example_number": 356,
        "table": "soccer_2",
        "golden_query": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'",
        "prediction": "SELECT state FROM college WHERE enr<(SELECT MAX( enr ) FROM college)",
        "errors_detected": [
            "Missing Column: cname",
            "Extra Column: state"
        ],
        "question": "What are the names of the schools with some players in the mid position but no goalies?"
    },
    {
        "example_number": 357,
        "table": "soccer_2",
        "golden_query": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'",
        "prediction": "SELECT state FROM college WHERE enr<(SELECT AVG( enr ) FROM college)",
        "errors_detected": [
            "Missing Column: cname",
            "Extra Column: state"
        ],
        "question": "What are the names of the schools with some players in the mid position but no goalies?"
    },
    {
        "example_number": 358,
        "table": "soccer_2",
        "golden_query": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)",
        "prediction": "SELECT cname FROM college WHERE enr > (SELECT MIN( enr ) FROM college WHERE state = 'FL')",
        "errors_detected": [
            "Missing Column: state",
            "Extra Column: cname",
            "Missing DISTINCT Keyword"
        ],
        "question": "What are the states with colleges that have enrollments less than the some other college?"
    },
    {
        "example_number": 359,
        "table": "soccer_2",
        "golden_query": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)",
        "prediction": "SELECT cname FROM college WHERE cname > (SELECT cname FROM college WHERE state = 'Florida')",
        "errors_detected": [
            "Missing Column: state",
            "Extra Column: cname",
            "Missing DISTINCT Keyword"
        ],
        "question": "What are the states with colleges that have enrollments less than the some other college?"
    },
    {
        "example_number": 360,
        "table": "soccer_2",
        "golden_query": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')",
        "prediction": "SELECT cname FROM college WHERE enr > (SELECT enr FROM college WHERE state = 'FL')",
        "errors_detected": [
            "Wrong Key Value",
            "Missing DISTINCT Keyword"
        ],
        "question": "What are the names of the colleges that are larger than at least one college in Florida?"
    },
    {
        "example_number": 361,
        "table": "soccer_2",
        "golden_query": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')",
        "prediction": "SELECT cname FROM college WHERE enr > (SELECT AVG( enr ) FROM college WHERE state = 'Florida')",
        "errors_detected": [
            "Wrong Key Value",
            "Missing DISTINCT Keyword"
        ],
        "question": "What are the names of the colleges that are larger than at least one college in Florida?"
    },
    {
        "example_number": 362,
        "table": "soccer_2",
        "golden_query": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')",
        "prediction": "SELECT SUM( enr ) FROM college WHERE cname NOT IN (SELECT cname FROM tryout WHERE ppos = 'goalie')",
        "errors_detected": [
            "Missing Column: cname",
            "Extra Column: sum(enr)"
        ],
        "question": "What are the names of all colleges with a larger enrollment than the largest college in Florida?"
    },
    {
        "example_number": 363,
        "table": "soccer_2",
        "golden_query": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')",
        "prediction": "SELECT SUM( enr ) FROM college WHERE cname NOT IN (SELECT cname FROM tryout)",
        "errors_detected": [
            "Missing Column: cname",
            "Extra Column: sum(enr)"
        ],
        "question": "What are the names of all colleges with a larger enrollment than the largest college in Florida?"
    },
    {
        "example_number": 364,
        "table": "soccer_2",
        "golden_query": "SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)",
        "prediction": "SELECT COUNT( DISTINCT state ) FROM college WHERE state<(SELECT AVG( enr ) FROM college)",
        "errors_detected": [
            "unclassified"
        ],
        "question": "How many states have smaller colleges than average?"
    },
    {
        "example_number": 365,
        "table": "device",
        "golden_query": "SELECT Carrier FROM device ORDER BY Carrier ASC",
        "prediction": "SELECT DISTINCT carrier FROM device ORDER BY carrier ASC",
        "errors_detected": [
            "Redundant DISTINCT Keyword"
        ],
        "question": "What are the different carriers for devices, listed in alphabetical order?"
    },
    {
        "example_number": 366,
        "table": "device",
        "golden_query": "SELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform",
        "prediction": "SELECT COUNT( * ) , software_platform FROM device GROUP BY software_platform",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the different software platforms for devices, and how many devices have each?"
    },
    {
        "example_number": 367,
        "table": "device",
        "golden_query": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC",
        "prediction": "SELECT software_platform , COUNT( * ) FROM device GROUP BY software_platform ORDER BY COUNT( * ) DESC",
        "errors_detected": [
            "Extra Column: count(None)"
        ],
        "question": "What are the different software platforms for devices, ordered by frequency descending?"
    },
    {
        "example_number": 368,
        "table": "device",
        "golden_query": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC",
        "prediction": "SELECT software_platform , COUNT( * ) FROM device GROUP BY software_platform ORDER BY COUNT( * ) DESC",
        "errors_detected": [
            "Extra Column: count(None)"
        ],
        "question": "What are the different software platforms for devices, ordered by frequency descending?"
    },
    {
        "example_number": 369,
        "table": "device",
        "golden_query": "SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008",
        "prediction": "SELECT location FROM shop WHERE open_year<2012 INTERSECT SELECT location FROM shop WHERE open_year<2008",
        "errors_detected": [
            "unclassified"
        ],
        "question": "Which locations contains both shops that opened after the year 2012 and shops that opened before 2008?"
    },
    {
        "example_number": 370,
        "table": "music_2",
        "golden_query": "SELECT * FROM Albums WHERE YEAR  =  2012",
        "prediction": "SELECT title FROM albums WHERE year = 2012",
        "errors_detected": [
            "Missing Column: *",
            "Extra Column: title"
        ],
        "question": "return all columns of the albums created in the year of 2012."
    },
    {
        "example_number": 371,
        "table": "music_2",
        "golden_query": "SELECT count(DISTINCT label) FROM albums",
        "prediction": "SELECT DISTINCT label FROM albums",
        "errors_detected": [
            "Missing Aggregation Function: count(label)"
        ],
        "question": "What are the unique labels for the albums?"
    },
    {
        "example_number": 372,
        "table": "music_2",
        "golden_query": "SELECT title FROM songs WHERE title LIKE '% the %'",
        "prediction": "SELECT title FROM songs WHERE title LIKE '%the%'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What are the names of the songs whose title has the word \"the\"?"
    },
    {
        "example_number": 373,
        "table": "music_2",
        "golden_query": "SELECT title FROM songs WHERE title LIKE '% the %'",
        "prediction": "SELECT title FROM songs WHERE title LIKE '%the%'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What are the names of the songs whose title has the word \"the\"?"
    },
    {
        "example_number": 374,
        "table": "music_2",
        "golden_query": "SELECT * FROM Albums WHERE YEAR  =  2010",
        "prediction": "SELECT title FROM albums WHERE year = 2010",
        "errors_detected": [
            "Missing Column: *",
            "Extra Column: title"
        ],
        "question": "What information is there on albums from 2010?"
    },
    {
        "example_number": 375,
        "table": "tracking_software_problems",
        "golden_query": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
        "prediction": "SELECT problem_log_id , problem_id FROM problem_log ORDER BY problem_id DESC LIMIT 1",
        "errors_detected": [
            "unclassified"
        ],
        "question": "Find the oldest log id and its corresponding problem id."
    },
    {
        "example_number": 376,
        "table": "tracking_software_problems",
        "golden_query": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
        "prediction": "SELECT MAX( problem_log_id ) , problem_id FROM problem_log",
        "errors_detected": [
            "Extra Aggregation Function: max(problem_log_id)",
            "Missing ORDER BY Clause"
        ],
        "question": "Find the oldest log id and its corresponding problem id."
    },
    {
        "example_number": 377,
        "table": "tracking_software_problems",
        "golden_query": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "prediction": "SELECT DISTINCT problem_id , log_entry_date FROM problem_log JOIN problems ON problem_id = problem_id WHERE problem_log_id = 10",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing Column: problem_log_id",
            "Extra Column: problem_id",
            "Redundant DISTINCT Keyword"
        ],
        "question": "For the problem with id 10, return the ids and dates of its problem logs."
    },
    {
        "example_number": 378,
        "table": "tracking_software_problems",
        "golden_query": "SELECT problem_log_id ,  log_entry_description FROM problem_log",
        "prediction": "SELECT problem_log_id , problem_description FROM problem_log JOIN problem_category_codes ON problem_category_code = problem_category_code JOIN problems ON problem_id = problem_id",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing Column: log_entry_description",
            "Extra Column: problem_description"
        ],
        "question": "What are the log id and entry description of each problem?"
    },
    {
        "example_number": 379,
        "table": "swimming",
        "golden_query": "SELECT count(DISTINCT city) FROM stadium WHERE opening_year  <  2006",
        "prediction": "SELECT COUNT( * ) FROM stadium WHERE opening_year<2006",
        "errors_detected": [
            "Missing Column: count(city)",
            "Extra Column: count(None)",
            "Missing DISTINCT Keyword"
        ],
        "question": "How many cities have a stadium that was opened before the year of 2006?"
    },
    {
        "example_number": 380,
        "table": "swimming",
        "golden_query": "SELECT nationality ,  count(*) FROM swimmer GROUP BY nationality HAVING count(*)  >  1",
        "prediction": "SELECT nationality FROM swimmer GROUP BY nationality HAVING COUNT( * ) > 1",
        "errors_detected": [
            "Missing Column: count(None)"
        ],
        "question": "List countries that have more than one swimmer."
    },
    {
        "example_number": 381,
        "table": "workshop_paper",
        "golden_query": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)",
        "prediction": "SELECT author FROM submission EXCEPT SELECT author FROM submission",
        "errors_detected": [
            "Missing WHERE Clause"
        ],
        "question": "Which authors did not submit to any workshop?"
    },
    {
        "example_number": 382,
        "table": "workshop_paper",
        "golden_query": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)",
        "prediction": "SELECT author FROM submission EXCEPT SELECT author FROM submission",
        "errors_detected": [
            "Missing WHERE Clause"
        ],
        "question": "Which authors did not submit to any workshop?"
    },
    {
        "example_number": 383,
        "table": "city_record",
        "golden_query": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1",
        "prediction": "SELECT city_id FROM city JOIN hosting_city ON city_id = host_city ORDER BY year DESC LIMIT 1",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing Column: host_city",
            "Extra Column: city_id"
        ],
        "question": "Find the city that hosted some events in the most recent year. What is the id of this city?"
    },
    {
        "example_number": 384,
        "table": "city_record",
        "golden_query": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1",
        "prediction": "SELECT city FROM city JOIN hosting_city ON city_id = host_city ORDER BY year DESC LIMIT 1",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing Column: host_city",
            "Extra Column: city"
        ],
        "question": "Find the city that hosted some events in the most recent year. What is the id of this city?"
    },
    {
        "example_number": 385,
        "table": "city_record",
        "golden_query": "SELECT match_id FROM MATCH WHERE competition = \"1994 FIFA World Cup qualification\"",
        "prediction": "SELECT match_id FROM match WHERE competition = 'World Cup qualification'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What is the match id of the competition called \"1994 FIFA World Cup qualification\"?"
    },
    {
        "example_number": 386,
        "table": "city_record",
        "golden_query": "SELECT city FROM city ORDER BY regional_population DESC LIMIT 3",
        "prediction": "SELECT regional_population FROM city ORDER BY regional_population DESC LIMIT 3",
        "errors_detected": [
            "Missing Column: city",
            "Extra Column: regional_population"
        ],
        "question": "What are the three largest cities in terms of regional population?"
    },
    {
        "example_number": 387,
        "table": "city_record",
        "golden_query": "SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000",
        "prediction": "SELECT city FROM city WHERE regional_population > 8000000 OR regional_population<5000000",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "Which cities have regional population above 8000000 or below 5000000?"
    },
    {
        "example_number": 388,
        "table": "city_record",
        "golden_query": "SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000",
        "prediction": "SELECT city FROM city WHERE regional_population > 8000000 OR regional_population<5000000",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "Which cities have regional population above 8000000 or below 5000000?"
    },
    {
        "example_number": 389,
        "table": "city_record",
        "golden_query": "SELECT count(*) ,  Competition FROM MATCH GROUP BY Competition",
        "prediction": "SELECT competition , COUNT( * ) FROM match GROUP BY competition",
        "errors_detected": [
            "unclassified"
        ],
        "question": "For each competition, count the number of matches."
    },
    {
        "example_number": 390,
        "table": "city_record",
        "golden_query": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1",
        "prediction": "SELECT gdp FROM city ORDER BY city DESC LIMIT 1",
        "errors_detected": [
            "unclassified"
        ],
        "question": "Find the GDP of the city with the largest regional population."
    },
    {
        "example_number": 391,
        "table": "school_bus",
        "golden_query": "SELECT party FROM driver WHERE home_city  =  'Hartford' AND age  >  40",
        "prediction": "SELECT party FROM driver WHERE home_city = 'Hartford' INTERSECT SELECT party FROM driver WHERE age > 40",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "Show the party with drivers from Hartford and drivers older than 40."
    },
    {
        "example_number": 392,
        "table": "flight_4",
        "golden_query": "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'",
        "prediction": "SELECT name , country , elevation FROM airports WHERE city = 'New York'",
        "errors_detected": [
            "Missing Column: city"
        ],
        "question": "What is the name, city, country, and elevation for every airport in the city of New York?"
    },
    {
        "example_number": 393,
        "table": "flight_4",
        "golden_query": "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'",
        "prediction": "SELECT name , country , elevation FROM airports WHERE city = 'New York'",
        "errors_detected": [
            "Missing Column: city"
        ],
        "question": "What is the name, city, country, and elevation for every airport in the city of New York?"
    },
    {
        "example_number": 394,
        "table": "flight_4",
        "golden_query": "SELECT country FROM airlines WHERE name LIKE 'Orbit%'",
        "prediction": "SELECT country FROM airlines WHERE name LIKE '%Orbit%'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What are the countries of all airlines whose names start with Orbit?"
    },
    {
        "example_number": 395,
        "table": "flight_4",
        "golden_query": "SELECT country FROM airlines WHERE name LIKE 'Orbit%'",
        "prediction": "SELECT country FROM airlines WHERE name LIKE '%Orbit%'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What are the countries of all airlines whose names start with Orbit?"
    },
    {
        "example_number": 396,
        "table": "flight_4",
        "golden_query": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50",
        "prediction": "SELECT name FROM airports WHERE elevation BETWEEN 50 and 50",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the names of all airports whose elevation is between -50 and 50?"
    },
    {
        "example_number": 397,
        "table": "flight_4",
        "golden_query": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50",
        "prediction": "SELECT name FROM airports WHERE elevation BETWEEN 50 and 50",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the names of all airports whose elevation is between -50 and 50?"
    },
    {
        "example_number": 398,
        "table": "flight_4",
        "golden_query": "SELECT count(*) FROM airports WHERE name LIKE '%International%'",
        "prediction": "SELECT COUNT( * ) FROM airports WHERE name LIKE '%Interanation%'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "How many airports' names have the word Interanation in them?"
    },
    {
        "example_number": 399,
        "table": "flight_4",
        "golden_query": "SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'",
        "prediction": "SELECT SUM( city ) FROM airports WHERE country = 'Greenland'",
        "errors_detected": [
            "Aggregation Function Mismatch for Column 'city': Expected 'count', Found 'sum'",
            "Missing DISTINCT Keyword"
        ],
        "question": "In how many cities are there airports in the country of Greenland?"
    },
    {
        "example_number": 400,
        "table": "flight_4",
        "golden_query": "SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC",
        "prediction": "SELECT country , COUNT( * ) FROM airports GROUP BY country ORDER BY COUNT( * ) DESC",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What is the number of airports per country, ordered from most to least?"
    },
    {
        "example_number": 401,
        "table": "flight_4",
        "golden_query": "SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC",
        "prediction": "SELECT country , COUNT( * ) FROM airports GROUP BY country ORDER BY COUNT( * ) DESC",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What is the number of airports per country, ordered from most to least?"
    },
    {
        "example_number": 402,
        "table": "flight_4",
        "golden_query": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",
        "prediction": "SELECT city , COUNT( * ) FROM airports WHERE country = 'United States' GROUP BY city ORDER BY COUNT( * ) DESC",
        "errors_detected": [
            "unclassified"
        ],
        "question": "How many airports are there per city in the US ordered from most to least?"
    },
    {
        "example_number": 403,
        "table": "flight_4",
        "golden_query": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",
        "prediction": "SELECT city , COUNT( * ) FROM airports GROUP BY city ORDER BY COUNT( * ) DESC",
        "errors_detected": [
            "Missing WHERE Clause"
        ],
        "question": "How many airports are there per city in the US ordered from most to least?"
    },
    {
        "example_number": 404,
        "table": "flight_4",
        "golden_query": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3",
        "prediction": "SELECT city FROM airports GROUP BY city HAVING COUNT( * ) > 3",
        "errors_detected": [
            "Missing WHERE Clause"
        ],
        "question": "What is the number of cities in the United States with more than 3 airports?"
    },
    {
        "example_number": 405,
        "table": "flight_4",
        "golden_query": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)",
        "prediction": "SELECT COUNT( DISTINCT city ) FROM airports GROUP BY city HAVING COUNT( * ) > 3",
        "errors_detected": [
            "Missing Column: count(None)",
            "Extra Column: count(city)",
            "Redundant HAVING Clause",
            "Redundant DISTINCT Keyword",
            "Wrong GROUP BY Condition"
        ],
        "question": "What is the count of cities with more than 3 airports?"
    },
    {
        "example_number": 406,
        "table": "flight_4",
        "golden_query": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)",
        "prediction": "SELECT city FROM airports GROUP BY city HAVING COUNT( * ) > 3",
        "errors_detected": [
            "Missing Column: count(None)",
            "Extra Column: city",
            "Redundant HAVING Clause",
            "Wrong GROUP BY Condition"
        ],
        "question": "What is the count of cities with more than 3 airports?"
    },
    {
        "example_number": 407,
        "table": "flight_4",
        "golden_query": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)",
        "prediction": "SELECT city FROM airports GROUP BY city HAVING COUNT( * ) > 2",
        "errors_detected": [
            "Missing ORDER BY Clause"
        ],
        "question": "What are the cities that have more than 2 airports sorted by number of airports?"
    },
    {
        "example_number": 408,
        "table": "flight_4",
        "golden_query": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)",
        "prediction": "SELECT city FROM airports GROUP BY city HAVING COUNT( * ) > 2",
        "errors_detected": [
            "Missing ORDER BY Clause"
        ],
        "question": "What are the cities that have more than 2 airports sorted by number of airports?"
    },
    {
        "example_number": 409,
        "table": "flight_4",
        "golden_query": "SELECT avg(elevation) ,  country FROM airports GROUP BY country",
        "prediction": "SELECT country , AVG( elevation ) FROM airports GROUP BY country",
        "errors_detected": [
            "unclassified"
        ],
        "question": "For each country, what is the average elevation of that country's airports?"
    },
    {
        "example_number": 410,
        "table": "architecture",
        "golden_query": "SELECT count(*) FROM architect WHERE gender  =  'female'",
        "prediction": "SELECT COUNT( * ) FROM architect WHERE gender = 'f'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "How many architects are female?"
    },
    {
        "example_number": 411,
        "table": "chinook_1",
        "golden_query": "SELECT Name FROM GENRE",
        "prediction": "SELECT DISTINCT name FROM genre",
        "errors_detected": [
            "Redundant DISTINCT Keyword"
        ],
        "question": "What are the names of different music genres?"
    },
    {
        "example_number": 412,
        "table": "chinook_1",
        "golden_query": "SELECT distinct(BillingCountry) FROM INVOICE",
        "prediction": "SELECT DISTINCT billingcountry FROM invoice",
        "errors_detected": [
            "Missing Aggregation Function: distinct(billingcountry)"
        ],
        "question": "Find the different billing countries for all invoices."
    },
    {
        "example_number": 413,
        "table": "chinook_1",
        "golden_query": "SELECT distinct(BillingCountry) FROM INVOICE",
        "prediction": "SELECT DISTINCT billingcountry FROM invoice",
        "errors_detected": [
            "Missing Aggregation Function: distinct(billingcountry)"
        ],
        "question": "Find the different billing countries for all invoices."
    },
    {
        "example_number": 414,
        "table": "chinook_1",
        "golden_query": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'",
        "prediction": "SELECT albumid FROM track WHERE albumid LIKE '%you%'",
        "errors_detected": [
            "Missing Column: name",
            "Extra Column: albumid"
        ],
        "question": "What are the names of tracks that contain the the word you in them?"
    },
    {
        "example_number": 415,
        "table": "chinook_1",
        "golden_query": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'",
        "prediction": "SELECT title FROM track JOIN genre ON genreid = genreid WHERE name = 'you'",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing Column: name",
            "Extra Column: title",
            "Missing LIKE Clause"
        ],
        "question": "What are the names of tracks that contain the the word you in them?"
    },
    {
        "example_number": 416,
        "table": "chinook_1",
        "golden_query": "SELECT AVG(UnitPrice) FROM TRACK",
        "prediction": "SELECT AVG( unitprice ) FROM invoiceline JOIN track ON trackid = trackid",
        "errors_detected": [
            "Redundant JOIN Operation"
        ],
        "question": "Find the average unit price for a track."
    },
    {
        "example_number": 417,
        "table": "chinook_1",
        "golden_query": "SELECT AVG(UnitPrice) FROM TRACK",
        "prediction": "SELECT AVG( unitprice ) FROM invoiceline JOIN track ON trackid = trackid",
        "errors_detected": [
            "Redundant JOIN Operation"
        ],
        "question": "Find the average unit price for a track."
    },
    {
        "example_number": 418,
        "table": "chinook_1",
        "golden_query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK",
        "prediction": "SELECT MAX( milliseconds ) FROM track WHERE name = '1'",
        "errors_detected": [
            "Aggregation Function Mismatch for Column 'milliseconds': Expected 'min', Found 'max'",
            "Redundant WHERE Clause"
        ],
        "question": "Find the maximum and minimum durations of tracks in milliseconds."
    },
    {
        "example_number": 419,
        "table": "chinook_1",
        "golden_query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK",
        "prediction": "SELECT MIN( milliseconds ) , MAX( milliseconds ) FROM track",
        "errors_detected": [
            "Aggregation Function Mismatch for Column 'milliseconds': Expected 'min', Found 'max'"
        ],
        "question": "Find the maximum and minimum durations of tracks in milliseconds."
    },
    {
        "example_number": 420,
        "table": "chinook_1",
        "golden_query": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"",
        "prediction": "SELECT firstname , lastname FROM customer WHERE email = 'br'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "Find the full name of the customer with the email \"luisg@embraer.com.br\"."
    },
    {
        "example_number": 421,
        "table": "chinook_1",
        "golden_query": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"",
        "prediction": "SELECT firstname , lastname FROM customer WHERE email = 'br'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "Find the full name of the customer with the email \"luisg@embraer.com.br\"."
    },
    {
        "example_number": 422,
        "table": "chinook_1",
        "golden_query": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"",
        "prediction": "SELECT COUNT( * ) FROM customer WHERE email LIKE '%com%'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "Count the number of customers that have an email containing \"gmail.com\"."
    },
    {
        "example_number": 423,
        "table": "chinook_1",
        "golden_query": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"",
        "prediction": "SELECT COUNT( * ) FROM customer WHERE email LIKE '%com%'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "Count the number of customers that have an email containing \"gmail.com\"."
    },
    {
        "example_number": 424,
        "table": "chinook_1",
        "golden_query": "SELECT distinct(UnitPrice) FROM TRACK",
        "prediction": "SELECT DISTINCT unitprice FROM invoiceline JOIN track ON trackid = trackid",
        "errors_detected": [
            "Redundant JOIN Operation",
            "Missing Aggregation Function: distinct(unitprice)"
        ],
        "question": "Find the distinct unit prices for tracks."
    },
    {
        "example_number": 425,
        "table": "chinook_1",
        "golden_query": "SELECT distinct(UnitPrice) FROM TRACK",
        "prediction": "SELECT DISTINCT unitprice FROM invoiceline JOIN track ON trackid = trackid",
        "errors_detected": [
            "Redundant JOIN Operation",
            "Missing Aggregation Function: distinct(unitprice)"
        ],
        "question": "Find the distinct unit prices for tracks."
    },
    {
        "example_number": 426,
        "table": "apartment_rentals",
        "golden_query": "SELECT  booking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "prediction": "SELECT booking_status_code , COUNT( * ) FROM apartment_bookings GROUP BY booking_status_code",
        "errors_detected": [
            "unclassified"
        ],
        "question": "How many bookings does each booking status have? List the booking status code and the number of corresponding bookings."
    },
    {
        "example_number": 427,
        "table": "apartment_rentals",
        "golden_query": "SELECT  booking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "prediction": "SELECT booking_status_code , COUNT( * ) FROM apartment_bookings GROUP BY booking_status_code",
        "errors_detected": [
            "unclassified"
        ],
        "question": "How many bookings does each booking status have? List the booking status code and the number of corresponding bookings."
    },
    {
        "example_number": 428,
        "table": "apartment_rentals",
        "golden_query": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1",
        "prediction": "SELECT apt_type_code , SUM( bathroom_count ) , SUM( bedroom_count ) FROM apartments GROUP BY apt_type_code",
        "errors_detected": [
            "Extra Aggregation Function: sum(bathroom_count)",
            "Extra Aggregation Function: sum(bedroom_count)",
            "Missing ORDER BY Clause"
        ],
        "question": "Which apartment type has the largest number of total rooms? Return the apartment type code, its number of bathrooms and number of bedrooms."
    },
    {
        "example_number": 429,
        "table": "apartment_rentals",
        "golden_query": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1",
        "prediction": "SELECT apt_type_code , SUM( bathroom_count ) , SUM( bedroom_count ) FROM apartments GROUP BY apt_type_code",
        "errors_detected": [
            "Extra Aggregation Function: sum(bathroom_count)",
            "Extra Aggregation Function: sum(bedroom_count)",
            "Missing ORDER BY Clause"
        ],
        "question": "Which apartment type has the largest number of total rooms? Return the apartment type code, its number of bathrooms and number of bedrooms."
    },
    {
        "example_number": 430,
        "table": "apartment_rentals",
        "golden_query": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1",
        "prediction": "SELECT apt_type_code FROM apartments WHERE bathroom_count > bathroom_count GROUP BY apt_type_code ORDER BY COUNT( * ) DESC LIMIT 1",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "Which apartment type code is the most common among apartments with more than one bathroom?"
    },
    {
        "example_number": 431,
        "table": "soccer_1",
        "golden_query": "SELECT max(weight) ,  min(weight) FROM Player",
        "prediction": "SELECT MAX( height ) , MIN( height ) FROM player",
        "errors_detected": [
            "Missing Column: min(weight)",
            "Extra Column: min(height)"
        ],
        "question": "What is the maximum and minimum height of all players?"
    },
    {
        "example_number": 432,
        "table": "soccer_1",
        "golden_query": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "prediction": "SELECT id FROM player WHERE height >= 180 AND overall_rating > 85",
        "errors_detected": [
            "Missing Column: player_api_id",
            "Extra Column: id",
            "Wrong Key Value"
        ],
        "question": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85."
    },
    {
        "example_number": 433,
        "table": "soccer_1",
        "golden_query": "SELECT player_api_id FROM Player WHERE height  >=  180 AND height  <=  190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot  =  \"left\"",
        "prediction": "SELECT id FROM player WHERE height BETWEEN 180 and 190",
        "errors_detected": [
            "Missing Column: player_api_id",
            "Extra Column: id"
        ],
        "question": "List all of the ids for left-footed players with a height between 180cm and 190cm."
    },
    {
        "example_number": 434,
        "table": "movie_1",
        "golden_query": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000",
        "prediction": "SELECT title FROM movie WHERE year > 2000 AND director = 'James Cameron'",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the titles of all movies that James Cameron directed after 2000?"
    },
    {
        "example_number": 435,
        "table": "movie_1",
        "golden_query": "SELECT max(stars) ,  min(stars) FROM Rating",
        "prediction": "SELECT MIN( stars ) , MAX( stars ) FROM rating",
        "errors_detected": [
            "Aggregation Function Mismatch for Column 'stars': Expected 'min', Found 'max'"
        ],
        "question": "What is the maximum and mininum number of stars a rating can receive?"
    },
    {
        "example_number": 436,
        "table": "movie_1",
        "golden_query": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)",
        "prediction": "SELECT title FROM movie ORDER BY year DESC LIMIT 1",
        "errors_detected": [
            "Missing WHERE Clause",
            "Redundant ORDER BY Clause"
        ],
        "question": "What is the title of the newest movie?"
    },
    {
        "example_number": 437,
        "table": "movie_1",
        "golden_query": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)",
        "prediction": "SELECT title FROM movie ORDER BY year DESC LIMIT 1",
        "errors_detected": [
            "Missing WHERE Clause",
            "Redundant ORDER BY Clause"
        ],
        "question": "What is the title of the newest movie?"
    },
    {
        "example_number": 438,
        "table": "movie_1",
        "golden_query": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \"Steven Spielberg\")",
        "prediction": "SELECT title FROM movie WHERE year > (SELECT year FROM movie WHERE director = 'Steven Spielberg')",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What are the names of all movies that were created after the most recent Steven Spielberg film?"
    },
    {
        "example_number": 439,
        "table": "movie_1",
        "golden_query": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \"Steven Spielberg\")",
        "prediction": "SELECT title FROM movie WHERE director = (SELECT MAX( director ) FROM movie WHERE director = 'Steven Spielberg')",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the names of all movies that were created after the most recent Steven Spielberg film?"
    },
    {
        "example_number": 440,
        "table": "movie_1",
        "golden_query": "SELECT name FROM Reviewer UNION SELECT title FROM Movie",
        "prediction": "SELECT name , title FROM movie JOIN reviewer ON mid = rid",
        "errors_detected": [
            "Extra JOIN Operation",
            "Extra Column: title"
        ],
        "question": "What are the names of all the reviewers and movie names?"
    },
    {
        "example_number": 441,
        "table": "movie_1",
        "golden_query": "SELECT name FROM Reviewer UNION SELECT title FROM Movie",
        "prediction": "SELECT name , title FROM movie JOIN rating ON mid = mid JOIN reviewer ON rid = rid",
        "errors_detected": [
            "Extra JOIN Operation",
            "Extra Column: title"
        ],
        "question": "What are the names of all the reviewers and movie names?"
    },
    {
        "example_number": 442,
        "table": "movie_1",
        "golden_query": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2",
        "prediction": "SELECT mid FROM rating GROUP BY mid HAVING COUNT( * ) >= 2",
        "errors_detected": [
            "Missing Column: avg(stars)"
        ],
        "question": "For each movie that received more than 3 reviews, what is the average rating?"
    },
    {
        "example_number": 443,
        "table": "movie_1",
        "golden_query": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2",
        "prediction": "SELECT mid FROM rating GROUP BY mid HAVING COUNT( * ) >= 3",
        "errors_detected": [
            "Missing Column: avg(stars)"
        ],
        "question": "For each movie that received more than 3 reviews, what is the average rating?"
    },
    {
        "example_number": 444,
        "table": "movie_1",
        "golden_query": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4",
        "prediction": "SELECT rid FROM reviewer EXCEPT SELECT rid FROM rating",
        "errors_detected": [
            "Missing WHERE Clause"
        ],
        "question": "What are the ids of all reviewers who did not give 4 stars?"
    },
    {
        "example_number": 445,
        "table": "movie_1",
        "golden_query": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4",
        "prediction": "SELECT rid FROM reviewer EXCEPT SELECT rid FROM rating",
        "errors_detected": [
            "Missing WHERE Clause"
        ],
        "question": "What are the ids of all reviewers who did not give 4 stars?"
    },
    {
        "example_number": 446,
        "table": "movie_1",
        "golden_query": "SELECT rID FROM Rating WHERE stars != 4",
        "prediction": "SELECT rid FROM reviewer EXCEPT SELECT rid FROM rating",
        "errors_detected": [
            "Missing WHERE Clause"
        ],
        "question": "What are the ids of all reviewers who have not given 4 stars at least once?"
    },
    {
        "example_number": 447,
        "table": "movie_1",
        "golden_query": "SELECT rID FROM Rating WHERE stars != 4",
        "prediction": "SELECT rid FROM reviewer EXCEPT SELECT rid FROM reviewer JOIN rating ON rid = rid GROUP BY rid HAVING COUNT( * ) >= 4",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing WHERE Clause",
            "Redundant HAVING Clause"
        ],
        "question": "What are the ids of all reviewers who have not given 4 stars at least once?"
    },
    {
        "example_number": 448,
        "table": "movie_1",
        "golden_query": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980",
        "prediction": "SELECT title FROM movie WHERE year > 1980 OR director = 'James Cameron'",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the names of all movies made before 1980 or had James Cameron as the director?"
    },
    {
        "example_number": 449,
        "table": "movie_1",
        "golden_query": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980",
        "prediction": "SELECT title FROM movie WHERE year > 1980 OR director = 'James Cameron'",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the names of all movies made before 1980 or had James Cameron as the director?"
    },
    {
        "example_number": 450,
        "table": "restaurant_1",
        "golden_query": "SELECT ResName FROM Restaurant",
        "prediction": "SELECT COUNT( * ) FROM restaurant",
        "errors_detected": [
            "Missing Column: resname",
            "Extra Column: count(None)"
        ],
        "question": "Show me all the restaurants."
    },
    {
        "example_number": 451,
        "table": "restaurant_1",
        "golden_query": "SELECT Advisor ,  count(*) FROM Student GROUP BY Advisor ORDER BY count(Advisor) DESC LIMIT 1",
        "prediction": "SELECT advisor , COUNT( * ) FROM student GROUP BY advisor ORDER BY COUNT( * ) DESC LIMIT 1",
        "errors_detected": [
            "unclassified"
        ],
        "question": "Which Advisor has most of students? List advisor and the number of students."
    },
    {
        "example_number": 452,
        "table": "restaurant_1",
        "golden_query": "SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1",
        "prediction": "SELECT major , COUNT( * ) FROM student GROUP BY major ORDER BY COUNT( * ) ASC LIMIT 1",
        "errors_detected": [
            "unclassified"
        ],
        "question": "Which major has least number of students? List the major and the number of students."
    },
    {
        "example_number": 453,
        "table": "restaurant_1",
        "golden_query": "SELECT Major ,  count(*) FROM Student GROUP BY Major HAVING count(Major) BETWEEN 2 AND 30",
        "prediction": "SELECT major , COUNT( * ) FROM student GROUP BY major HAVING COUNT( * ) BETWEEN 2 and 30",
        "errors_detected": [
            "unclassified"
        ],
        "question": "Which major has between 2 and 30 number of students? List major and the number of students."
    },
    {
        "example_number": 454,
        "table": "restaurant_1",
        "golden_query": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major != 600 AND Sex = 'F'",
        "prediction": "SELECT fname , lname FROM student WHERE sex = 'f' AND age > 18 AND major != 600",
        "errors_detected": [
            "unclassified"
        ],
        "question": "List all female students age is older than 18 who is not majoring in 600. List students' first name and last name."
    },
    {
        "example_number": 455,
        "table": "e_learning",
        "golden_query": "SELECT address_line_1 FROM Course_Authors_and_Tutors",
        "prediction": "SELECT DISTINCT address_line_1 FROM course_authors_and_tutors",
        "errors_detected": [
            "Redundant DISTINCT Keyword"
        ],
        "question": "What is the address of each course author or tutor?"
    },
    {
        "example_number": 456,
        "table": "e_learning",
        "golden_query": "SELECT count(course_id) FROM Student_Course_Enrolment",
        "prediction": "SELECT COUNT( DISTINCT course_id ) FROM student_course_enrolment",
        "errors_detected": [
            "Redundant DISTINCT Keyword"
        ],
        "question": "Find the number of distinct courses that have enrolled students."
    },
    {
        "example_number": 457,
        "table": "e_learning",
        "golden_query": "SELECT count(course_id) FROM Student_Course_Enrolment",
        "prediction": "SELECT COUNT( DISTINCT course_id ) FROM courses",
        "errors_detected": [
            "Redundant DISTINCT Keyword"
        ],
        "question": "Find the number of distinct courses that have enrolled students."
    },
    {
        "example_number": 458,
        "table": "e_learning",
        "golden_query": "SELECT test_result ,  COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC",
        "prediction": "SELECT test_result , COUNT( * ) FROM student_tests_taken GROUP BY test_result",
        "errors_detected": [
            "Missing ORDER BY Clause"
        ],
        "question": "For each distinct test result, find the number of students who got the result."
    },
    {
        "example_number": 459,
        "table": "network_2",
        "golden_query": "SELECT count(*) FROM Person WHERE gender  =  'female'",
        "prediction": "SELECT COUNT( * ) FROM person WHERE gender = 'f'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "How many females are in the network?"
    },
    {
        "example_number": 460,
        "table": "network_2",
        "golden_query": "SELECT count(*) FROM Person WHERE gender  =  'female'",
        "prediction": "SELECT COUNT( * ) FROM person WHERE gender = 'f'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "How many females are in the network?"
    },
    {
        "example_number": 461,
        "table": "network_2",
        "golden_query": "SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person)",
        "prediction": "SELECT age FROM person ORDER BY age DESC LIMIT 1",
        "errors_detected": [
            "Missing Column: name",
            "Extra Column: age",
            "Missing WHERE Clause",
            "Redundant ORDER BY Clause"
        ],
        "question": "What is the name of the person who is the oldest?"
    },
    {
        "example_number": 462,
        "table": "network_2",
        "golden_query": "SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person)",
        "prediction": "SELECT name FROM person ORDER BY age DESC LIMIT 1",
        "errors_detected": [
            "Missing WHERE Clause",
            "Redundant ORDER BY Clause"
        ],
        "question": "What is the name of the person who is the oldest?"
    },
    {
        "example_number": 463,
        "table": "network_2",
        "golden_query": "SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )",
        "prediction": "SELECT age FROM person WHERE job = 'student' ORDER BY age DESC LIMIT 1",
        "errors_detected": [
            "Missing Column: name",
            "Extra Column: age",
            "Redundant ORDER BY Clause"
        ],
        "question": "What is the name of the oldest student?"
    },
    {
        "example_number": 464,
        "table": "network_2",
        "golden_query": "SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )",
        "prediction": "SELECT name FROM person ORDER BY age DESC LIMIT 1",
        "errors_detected": [
            "Missing WHERE Clause",
            "Redundant ORDER BY Clause"
        ],
        "question": "What is the name of the oldest student?"
    },
    {
        "example_number": 465,
        "table": "network_2",
        "golden_query": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )",
        "prediction": "SELECT MIN( age ) FROM person ORDER BY age ASC LIMIT 1",
        "errors_detected": [
            "Missing Column: name",
            "Extra Column: min(age)",
            "Missing WHERE Clause",
            "Redundant ORDER BY Clause"
        ],
        "question": "What is the name of the youngest male?"
    },
    {
        "example_number": 466,
        "table": "network_2",
        "golden_query": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )",
        "prediction": "SELECT name FROM person WHERE gender = 'm' ORDER BY age ASC LIMIT 1",
        "errors_detected": [
            "Wrong Key Value",
            "Redundant ORDER BY Clause"
        ],
        "question": "What is the name of the youngest male?"
    },
    {
        "example_number": 467,
        "table": "network_2",
        "golden_query": "SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'",
        "prediction": "SELECT COUNT( * ) FROM person JOIN HOw many engineers are older than 30 ON job = HOw many engineers are older than 30 WHERE age > 30",
        "errors_detected": [
            "unclassified"
        ],
        "question": "HOw many engineers are older than 30?"
    },
    {
        "example_number": 468,
        "table": "network_2",
        "golden_query": "SELECT avg(age) ,  gender FROM Person GROUP BY gender",
        "prediction": "SELECT gender , AVG( age ) FROM person GROUP BY gender",
        "errors_detected": [
            "unclassified"
        ],
        "question": "How old is each gender, on average?"
    },
    {
        "example_number": 469,
        "table": "network_2",
        "golden_query": "SELECT avg(age) ,  job FROM Person GROUP BY job",
        "prediction": "SELECT job , AVG( age ) FROM person GROUP BY job",
        "errors_detected": [
            "unclassified"
        ],
        "question": "How old is the average person for each job?"
    },
    {
        "example_number": 470,
        "table": "network_2",
        "golden_query": "SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job",
        "prediction": "SELECT AVG( age ) , job FROM person WHERE gender = 'm' GROUP BY job",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What is the average age for a male in each job?"
    },
    {
        "example_number": 471,
        "table": "network_2",
        "golden_query": "SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job",
        "prediction": "SELECT AVG( age ) , job FROM person WHERE gender = 'm' GROUP BY job",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What is the average age for a male in each job?"
    },
    {
        "example_number": 472,
        "table": "network_2",
        "golden_query": "SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender",
        "prediction": "SELECT gender , COUNT( * ) FROM person WHERE age<40 GROUP BY gender",
        "errors_detected": [
            "unclassified"
        ],
        "question": "How many people are under 40 for each gender?"
    },
    {
        "example_number": 473,
        "table": "network_2",
        "golden_query": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age",
        "prediction": "SELECT name FROM person WHERE job = 'engineer' ORDER BY age ASC",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What is the name of all the people who are older than at least one engineer? Order them by age."
    },
    {
        "example_number": 474,
        "table": "network_2",
        "golden_query": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age",
        "prediction": "SELECT name FROM person WHERE job = 'engineer' ORDER BY age ASC",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What is the name of all the people who are older than at least one engineer? Order them by age."
    },
    {
        "example_number": 475,
        "table": "network_2",
        "golden_query": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')",
        "prediction": "SELECT COUNT( * ) FROM person WHERE age = 'engineers' ORDER BY age DESC LIMIT *",
        "errors_detected": [
            "Redundant ORDER BY Clause"
        ],
        "question": "How many people are older than every engineer?"
    },
    {
        "example_number": 476,
        "table": "network_2",
        "golden_query": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')",
        "prediction": "SELECT COUNT( * ) FROM personfriend, personfriend WHERE job = 'engineer'",
        "errors_detected": [
            "unclassified"
        ],
        "question": "How many people are older than every engineer?"
    },
    {
        "example_number": 477,
        "table": "network_2",
        "golden_query": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age",
        "prediction": "SELECT name , age FROM person WHERE gender = 'm' ORDER BY age ASC",
        "errors_detected": [
            "Extra Column: age",
            "Wrong Key Value"
        ],
        "question": "What is the name and age of every male? Order the results by age."
    },
    {
        "example_number": 478,
        "table": "network_2",
        "golden_query": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age",
        "prediction": "SELECT name , age FROM person WHERE gender = 'm' ORDER BY age ASC",
        "errors_detected": [
            "Extra Column: age",
            "Wrong Key Value"
        ],
        "question": "What is the name and age of every male? Order the results by age."
    },
    {
        "example_number": 479,
        "table": "college_3",
        "golden_query": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\"",
        "prediction": "SELECT COUNT( * ) FROM enrolled_in WHERE grade = 'B'",
        "errors_detected": [
            "Missing Column: count(stuid)",
            "Extra Column: count(None)",
            "Missing DISTINCT Keyword"
        ],
        "question": "How many students have had at least one \"B\" grade?"
    },
    {
        "example_number": 480,
        "table": "college_3",
        "golden_query": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\"",
        "prediction": "SELECT COUNT( * ) FROM enrolled_in WHERE grade = 'B'",
        "errors_detected": [
            "Missing Column: count(stuid)",
            "Extra Column: count(None)",
            "Missing DISTINCT Keyword"
        ],
        "question": "How many students have had at least one \"B\" grade?"
    },
    {
        "example_number": 481,
        "table": "college_3",
        "golden_query": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION",
        "prediction": "SELECT lettergrade , MAX( gradepoint ) , MIN( gradepoint ) FROM gradeconversion GROUP BY lettergrade",
        "errors_detected": [
            "Extra Column: lettergrade"
        ],
        "question": "What are the maximum and minumum grade points?"
    },
    {
        "example_number": 482,
        "table": "college_3",
        "golden_query": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'",
        "prediction": "SELECT fname , lname FROM student WHERE fname LIKE '%a%'",
        "errors_detected": [
            "Extra Column: lname",
            "Missing DISTINCT Keyword"
        ],
        "question": "What are the first names for students who have an \"a\" in their first name?"
    },
    {
        "example_number": 483,
        "table": "college_3",
        "golden_query": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'",
        "prediction": "SELECT DISTINCT lname FROM student WHERE fname LIKE '%a%'",
        "errors_detected": [
            "Missing Column: fname",
            "Extra Column: lname"
        ],
        "question": "What are the first names for students who have an \"a\" in their first name?"
    },
    {
        "example_number": 484,
        "table": "college_3",
        "golden_query": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\"",
        "prediction": "SELECT room FROM faculty JOIN member_of ON facid = facid JOIN department ON dno = dno WHERE rank = 'professors' AND building = 'NEB'",
        "errors_detected": [
            "Extra JOIN Operation",
            "Wrong Key Value"
        ],
        "question": "What are the rooms for members of the faculty who are professors and who live in building NEB?"
    },
    {
        "example_number": 485,
        "table": "college_3",
        "golden_query": "SELECT Fname FROM FACULTY WHERE Rank  =  \"Professor\" ORDER BY Fname",
        "prediction": "SELECT fname FROM faculty WHERE rank = 'professors,' ORDER BY fname ASC",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What are the first names for all faculty professors, ordered by first name?"
    },
    {
        "example_number": 486,
        "table": "college_3",
        "golden_query": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4",
        "prediction": "SELECT cname FROM course WHERE credits = 3 OR hours = 4",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the names of courses that give either 3 credits, or 1 credit and 4 hours?"
    },
    {
        "example_number": 487,
        "table": "college_3",
        "golden_query": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4",
        "prediction": "SELECT cname FROM course WHERE credits = 3 OR hours = 4",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the names of courses that give either 3 credits, or 1 credit and 4 hours?"
    },
    {
        "example_number": 488,
        "table": "college_3",
        "golden_query": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"",
        "prediction": "SELECT dname FROM department WHERE division = 'AS' OR division = 'NEB'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What are the names of departments either in division AS, or in division EN and in building NEB?"
    },
    {
        "example_number": 489,
        "table": "college_3",
        "golden_query": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"",
        "prediction": "SELECT dname FROM department WHERE division = 'AS' OR building = 'NEB'",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the names of departments either in division AS, or in division EN and in building NEB?"
    },
    {
        "example_number": 490,
        "table": "voter_2",
        "golden_query": "SELECT max(Age) FROM STUDENT",
        "prediction": "SELECT age FROM student ORDER BY age DESC LIMIT 1",
        "errors_detected": [
            "Missing Aggregation Function: max(age)",
            "Redundant ORDER BY Clause"
        ],
        "question": "What is the oldest age among the students?"
    },
    {
        "example_number": 491,
        "table": "voter_2",
        "golden_query": "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08/30/2015\"",
        "prediction": "SELECT DISTINCT president_vote FROM voting_record JOIN 08/30/2015 ON election_cycle = 08/30/2015",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing WHERE Clause"
        ],
        "question": "Show all the distinct president votes made on 08/30/2015."
    },
    {
        "example_number": 492,
        "table": "voter_2",
        "golden_query": "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08/30/2015\"",
        "prediction": "SELECT DISTINCT president_vote FROM voting_record JOIN 08/30/2015 ON election_cycle = 08/30/2015",
        "errors_detected": [
            "Extra JOIN Operation",
            "Missing WHERE Clause"
        ],
        "question": "Show all the distinct president votes made on 08/30/2015."
    },
    {
        "example_number": 493,
        "table": "voter_2",
        "golden_query": "SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle",
        "prediction": "SELECT COUNT( * ) , election_cycle FROM voting_record GROUP BY election_cycle",
        "errors_detected": [
            "unclassified"
        ],
        "question": "Count the number of voting records for each election cycle."
    },
    {
        "example_number": 494,
        "table": "voter_2",
        "golden_query": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*)  >  2",
        "prediction": "SELECT DISTINCT advisor FROM student GROUP BY advisor HAVING COUNT( * ) > 2",
        "errors_detected": [
            "Redundant DISTINCT Keyword"
        ],
        "question": "Which advisors are advising more than 2 students?"
    },
    {
        "example_number": 495,
        "table": "cre_Theme_park",
        "golden_query": "SELECT price_range FROM HOTELS",
        "prediction": "SELECT DISTINCT price_range FROM hotels",
        "errors_detected": [
            "Redundant DISTINCT Keyword"
        ],
        "question": "Tell me the price ranges for all the hotels."
    },
    {
        "example_number": 496,
        "table": "cre_Theme_park",
        "golden_query": "SELECT Tourist_Details FROM VISITORS",
        "prediction": "SELECT COUNT( DISTINCT tourist_id ) FROM visitors",
        "errors_detected": [
            "Missing Column: tourist_details",
            "Extra Column: count(tourist_id)",
            "Redundant DISTINCT Keyword"
        ],
        "question": "What is the detail of each visitor?"
    },
    {
        "example_number": 497,
        "table": "cre_Theme_park",
        "golden_query": "SELECT price_range FROM HOTELS WHERE star_rating_code  =  \"5\"",
        "prediction": "SELECT price_range FROM hotels WHERE star_rating_code = 5",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the price ranges of five star hotels?"
    },
    {
        "example_number": 498,
        "table": "cre_Theme_park",
        "golden_query": "SELECT price_range FROM HOTELS WHERE star_rating_code  =  \"5\"",
        "prediction": "SELECT price_range FROM hotels WHERE star_rating_code = 5",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the price ranges of five star hotels?"
    },
    {
        "example_number": 499,
        "table": "cre_Theme_park",
        "golden_query": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1",
        "prediction": "SELECT AVG( price_range ) FROM hotels WHERE star_rating_code = 5 AND pets_allowed_yn = 'pets'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What is the average price range of five star hotels that allow pets?"
    },
    {
        "example_number": 500,
        "table": "cre_Theme_park",
        "golden_query": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1",
        "prediction": "SELECT AVG( price_range ) FROM hotels WHERE pets_allowed_yn = 5",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What is the average price range of five star hotels that allow pets?"
    },
    {
        "example_number": 501,
        "table": "cre_Theme_park",
        "golden_query": "SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code",
        "prediction": "SELECT AVG( price_range ) , star_rating_code FROM hotels GROUP BY star_rating_code",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What is the average price range of hotels for each each star rating code?"
    },
    {
        "example_number": 502,
        "table": "cre_Theme_park",
        "golden_query": "SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code",
        "prediction": "SELECT AVG( price_range ) , star_rating_code FROM hotels GROUP BY star_rating_code",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What is the average price range of hotels for each each star rating code?"
    },
    {
        "example_number": 503,
        "table": "cre_Theme_park",
        "golden_query": "SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn",
        "prediction": "SELECT AVG( price_range ) , pets_allowed_yn FROM hotels GROUP BY pets_allowed_yn",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the average prices of hotels grouped by their pet policy."
    },
    {
        "example_number": 504,
        "table": "cre_Theme_park",
        "golden_query": "SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn",
        "prediction": "SELECT AVG( price_range ) , pets_allowed_yn FROM hotels GROUP BY pets_allowed_yn",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the average prices of hotels grouped by their pet policy."
    },
    {
        "example_number": 505,
        "table": "wine_1",
        "golden_query": "SELECT Name FROM WINE ORDER BY Score LIMIT 1",
        "prediction": "SELECT name FROM wine ORDER BY score DESC LIMIT 1",
        "errors_detected": [
            "unclassified"
        ],
        "question": "Give the name of the wine with the highest score."
    },
    {
        "example_number": 506,
        "table": "wine_1",
        "golden_query": "SELECT Name FROM WINE ORDER BY Score LIMIT 1",
        "prediction": "SELECT name FROM wine ORDER BY score DESC LIMIT 1",
        "errors_detected": [
            "unclassified"
        ],
        "question": "Give the name of the wine with the highest score."
    },
    {
        "example_number": 507,
        "table": "wine_1",
        "golden_query": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1",
        "prediction": "SELECT winery FROM wine ORDER BY score DESC LIMIT 1",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What is the winery at which the wine with the highest score was made?"
    },
    {
        "example_number": 508,
        "table": "wine_1",
        "golden_query": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1",
        "prediction": "SELECT winery FROM wine ORDER BY score DESC LIMIT 1",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What is the winery at which the wine with the highest score was made?"
    },
    {
        "example_number": 509,
        "table": "wine_1",
        "golden_query": "SELECT Name FROM WINE WHERE YEAR  =  \"2008\"",
        "prediction": "SELECT name FROM wine WHERE year = 2008",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the names of all wines produced in 2008?"
    },
    {
        "example_number": 510,
        "table": "wine_1",
        "golden_query": "SELECT Name FROM WINE WHERE YEAR  =  \"2008\"",
        "prediction": "SELECT name FROM wine WHERE year = 2008",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the names of all wines produced in 2008?"
    },
    {
        "example_number": 511,
        "table": "wine_1",
        "golden_query": "SELECT Grape ,  Appelation FROM WINE",
        "prediction": "SELECT grape , appelation FROM wine JOIN grapes ON grape = id",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "What are the grapes and appelations of each wine?"
    },
    {
        "example_number": 512,
        "table": "wine_1",
        "golden_query": "SELECT Name FROM WINE WHERE score  >  90",
        "prediction": "SELECT DISTINCT name FROM wine WHERE score > 90",
        "errors_detected": [
            "Redundant DISTINCT Keyword"
        ],
        "question": "What are the names of wines with scores higher than 90?"
    },
    {
        "example_number": 513,
        "table": "wine_1",
        "golden_query": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"",
        "prediction": "SELECT COUNT( * ) FROM appellations WHERE county = 'Napa Country'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "Count the number of appelations in Napa County."
    },
    {
        "example_number": 514,
        "table": "wine_1",
        "golden_query": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"",
        "prediction": "SELECT COUNT( * ) FROM appellations WHERE county = 'Napa County'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "Count the number of appelations in Napa County."
    },
    {
        "example_number": 515,
        "table": "wine_1",
        "golden_query": "SELECT count(*) ,  Grape FROM WINE GROUP BY Grape",
        "prediction": "SELECT grape , COUNT( * ) FROM wine GROUP BY grape",
        "errors_detected": [
            "unclassified"
        ],
        "question": "How many wines are there for each grape?"
    },
    {
        "example_number": 516,
        "table": "wine_1",
        "golden_query": "SELECT count(*) ,  Grape FROM WINE GROUP BY Grape",
        "prediction": "SELECT grape , COUNT( * ) FROM wine JOIN grapes ON grape = id GROUP BY grape",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "How many wines are there for each grape?"
    },
    {
        "example_number": 517,
        "table": "wine_1",
        "golden_query": "SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR",
        "prediction": "SELECT name , AVG( price ) FROM wine GROUP BY name",
        "errors_detected": [
            "Extra Column: name",
            "Wrong GROUP BY Condition"
        ],
        "question": "What is the average prices of wines for each each?"
    },
    {
        "example_number": 518,
        "table": "wine_1",
        "golden_query": "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")",
        "prediction": "SELECT DISTINCT name FROM wine WHERE price > (SELECT MAX( price ) FROM wine WHERE winery = 'John Anthony')",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What are the distinct names of wines with prices higher than any wine from John Anthony winery."
    },
    {
        "example_number": 519,
        "table": "wine_1",
        "golden_query": "SELECT DISTINCT Name FROM WINE ORDER BY Name",
        "prediction": "SELECT name FROM wine ORDER BY name ASC",
        "errors_detected": [
            "Missing DISTINCT Keyword"
        ],
        "question": "What are the names of wines, sorted in alphabetical order?"
    },
    {
        "example_number": 520,
        "table": "wine_1",
        "golden_query": "SELECT DISTINCT Name FROM WINE ORDER BY price",
        "prediction": "SELECT name FROM wine ORDER BY price ASC",
        "errors_detected": [
            "Missing DISTINCT Keyword"
        ],
        "question": "What are the names of wines, sorted by price ascending?"
    },
    {
        "example_number": 521,
        "table": "wine_1",
        "golden_query": "SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\"",
        "prediction": "SELECT AVG( price ) , AVG( cases ) FROM wine WHERE grape = 'Zinfandel' AND year = 2009",
        "errors_detected": [
            "unclassified"
        ],
        "question": "Give the average price and case of wines made from Zinfandel grapes in the year 2009."
    },
    {
        "example_number": 522,
        "table": "wine_1",
        "golden_query": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"",
        "prediction": "SELECT MAX( price ) , score FROM wine WHERE appelation = 'St. Helena'",
        "errors_detected": [
            "Missing Aggregation Function: max(score)"
        ],
        "question": "Give the maximum price and score for wines produced in the appelation St. Helena."
    },
    {
        "example_number": 523,
        "table": "wine_1",
        "golden_query": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"",
        "prediction": "SELECT MAX( price ) , score FROM wine WHERE appelation = 'St. Helena'",
        "errors_detected": [
            "Missing Aggregation Function: max(score)"
        ],
        "question": "Give the maximum price and score for wines produced in the appelation St. Helena."
    },
    {
        "example_number": 524,
        "table": "wine_1",
        "golden_query": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR",
        "prediction": "SELECT MAX( price ) , score , year FROM wine GROUP BY year",
        "errors_detected": [
            "Missing Aggregation Function: max(score)"
        ],
        "question": "What are the maximum price and score of wines for each year?"
    },
    {
        "example_number": 525,
        "table": "wine_1",
        "golden_query": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR",
        "prediction": "SELECT MAX( price ) , score , year FROM wine GROUP BY year",
        "errors_detected": [
            "Missing Aggregation Function: max(score)"
        ],
        "question": "What are the maximum price and score of wines for each year?"
    },
    {
        "example_number": 526,
        "table": "wine_1",
        "golden_query": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")",
        "prediction": "SELECT name FROM wine WHERE name != (SELECT name FROM wine WHERE winery = 'Brander')",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the names of wines produced before any wine from the Brander winery?"
    },
    {
        "example_number": 527,
        "table": "wine_1",
        "golden_query": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3",
        "prediction": "SELECT winery FROM wine JOIN grapes ON grape = grape WHERE color = 'white' GROUP BY winery ORDER BY COUNT( * ) DESC LIMIT 3",
        "errors_detected": [
            "unclassified"
        ],
        "question": "Which 3 wineries produce the most wines made from white grapes?"
    },
    {
        "example_number": 528,
        "table": "wine_1",
        "golden_query": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3",
        "prediction": "SELECT winery FROM wine JOIN grapes ON grape = grape WHERE color = 'white' GROUP BY winery ORDER BY COUNT( * ) DESC LIMIT 3",
        "errors_detected": [
            "unclassified"
        ],
        "question": "Which 3 wineries produce the most wines made from white grapes?"
    },
    {
        "example_number": 529,
        "table": "wine_1",
        "golden_query": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR",
        "prediction": "SELECT grape , winery FROM wine WHERE price > 100 ORDER BY year ASC",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the grapes, wineries and years for wines with price higher than 100, sorted by year?"
    },
    {
        "example_number": 530,
        "table": "wine_1",
        "golden_query": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR",
        "prediction": "SELECT grape , winery FROM wine WHERE price > 100 ORDER BY year ASC",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the grapes, wineries and years for wines with price higher than 100, sorted by year?"
    },
    {
        "example_number": 531,
        "table": "wine_1",
        "golden_query": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"",
        "prediction": "SELECT appelation FROM wine WHERE year > 2008 AND area != 'Central Coast'",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the appelations for wines produced after 2008 but not in the Central Coast area?"
    },
    {
        "example_number": 532,
        "table": "wine_1",
        "golden_query": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"",
        "prediction": "SELECT appelation FROM wine WHERE year > 2008 AND area != 'Central Coast'",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What are the appelations for wines produced after 2008 but not in the Central Coast area?"
    },
    {
        "example_number": 533,
        "table": "driving_school",
        "golden_query": "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\"",
        "prediction": "SELECT date_of_birth FROM staff WHERE first_name = 'Janessa' AND last_name = 'Janessa Sawayn'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What is the date of birth for the staff member named Janessa Sawayn?"
    },
    {
        "example_number": 534,
        "table": "driving_school",
        "golden_query": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\"",
        "prediction": "SELECT date_joined_staff FROM staff WHERE first_name = 'Janessa' AND last_name = 'Janessa Sawayn'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "When did the staff member named Janessa Sawayn join the company?"
    },
    {
        "example_number": 535,
        "table": "driving_school",
        "golden_query": "SELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\"",
        "prediction": "SELECT date_left_staff FROM staff WHERE first_name = 'Janessa' AND last_name = 'Janessa Sawayn'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "When did the staff member Janessa Sawayn leave the company?"
    },
    {
        "example_number": 536,
        "table": "driving_school",
        "golden_query": "SELECT nickname FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\"",
        "prediction": "SELECT nickname FROM staff WHERE first_name = 'Janessa' AND last_name = 'Janessa Sawayn'",
        "errors_detected": [
            "Wrong Key Value"
        ],
        "question": "What is the nickname of the employee named Janessa Sawayn?"
    },
    {
        "example_number": 537,
        "table": "driving_school",
        "golden_query": "SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = \"Marina\" OR last_name  =  \"Kohler\"",
        "prediction": "SELECT customer_status_code , cell_mobile_phone_number , email_address FROM customers WHERE last_name = 'Kohler' OR first_name = 'Marina'",
        "errors_detected": [
            "unclassified"
        ],
        "question": "What is the status code, phone number, and email address of the customer whose last name is Kohler or whose first name is Marina?"
    },
    {
        "example_number": 538,
        "table": "driving_school",
        "golden_query": "SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = \"Marina\" OR last_name  =  \"Kohler\"",
        "prediction": "SELECT customer_status_code , phone_number , email_address FROM customers WHERE first_name = 'Kohler' OR first_name = 'Marina'",
        "errors_detected": [
            "Missing Column: cell_mobile_phone_number",
            "Extra Column: phone_number",
            "Wrong Key Value"
        ],
        "question": "What is the status code, phone number, and email address of the customer whose last name is Kohler or whose first name is Marina?"
    },
    {
        "example_number": 539,
        "table": "driving_school",
        "golden_query": "SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\"",
        "prediction": "SELECT date_became_customer FROM customers WHERE date_became_customer<(SELECT date_became_customer FROM customers WHERE first_name = 'Bernhard')",
        "errors_detected": [
            "unclassified"
        ],
        "question": "When did Carole Bernhard first become a customer?"
    },
    {
        "example_number": 540,
        "table": "driving_schoolSELECT MAX( amount_outstanding ) , MIN( amount_outstanding ) , AVG( amount_outstanding ) FROM customers\tdriving_school",
        "golden_query": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1",
        "prediction": "SELECT customer_status_code FROM customers GROUP BY customer_status_code ORDER BY COUNT( * ) ASC LIMIT 1",
        "errors_detected": [
            "unclassified"
        ],
        "question": "No matching question found"
    },
    {
        "example_number": 541,
        "table": "driving_school",
        "golden_query": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff",
        "prediction": "SELECT last_name FROM customers UNION SELECT last_name FROM customers JOIN staff ON customer_id = last_name",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "What are the last names that are used by customers and staff?"
    },
    {
        "example_number": 542,
        "table": "driving_school",
        "golden_query": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff",
        "prediction": "SELECT last_name FROM customers UNION SELECT last_name FROM customers JOIN staff ON customer_id = last_name",
        "errors_detected": [
            "Extra JOIN Operation"
        ],
        "question": "What are the last names that are used by customers and staff?"
    }
]